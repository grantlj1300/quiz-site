{"ast":null,"code":"var _jsxFileName = \"/Users/grantlj/Documents/React/FreeCodeCamp/quiz-site/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { nanoid } from 'nanoid';\nimport Question from './components/Question';\nimport StartScreen from './components/StartScreen';\nimport PlayScreen from './components/PlayScreen';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  // Grab category: id data from API once\n  const [categories, setCategories] = React.useState([]);\n  React.useEffect(() => {\n    fetch(\"https://opentdb.com/api_category.php\").then(res => res.json()).then(data => setCategories(data.trivia_categories));\n  }, []);\n  const categoryOptions = categories.map(category => /*#__PURE__*/_jsxDEV(\"option\", {\n    value: category.id,\n    children: category.name\n  }, category.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 3\n  }, this)); // Game state tracks which screen to render\n\n  const [playingGame, setPlayingGame] = React.useState(false);\n\n  function generateUrl() {\n    let {\n      numQuestions,\n      category,\n      difficulty,\n      type\n    } = formData;\n    numQuestions = `amount=${numQuestions}`;\n    category = category === 0 ? \"\" : `&category=${category}`;\n    difficulty = difficulty === \"\" ? \"\" : `&difficulty=${difficulty}`;\n    type = type === \"\" ? \"\" : `&type=${type}`;\n    return `https://opentdb.com/api.php?${numQuestions}\n\t\t\t${category}${difficulty}${type}`;\n  }\n\n  function startGame() {\n    fetch(generateUrl()).then(res => res.json()).then(data => generateNewQuestions(data.results));\n    setPlayingGame(true);\n    setFormData({\n      numQuestions: \"\",\n      category: 0,\n      difficulty: \"\",\n      type: \"\"\n    });\n  }\n\n  function toStartScreen() {\n    setPlayingGame(false);\n  }\n\n  function generateNewQuestions(questionsArray) {\n    setAllQuestions(questionsArray);\n  }\n\n  const [allQuestions, setAllQuestions] = React.useState([]);\n  const questionElements = allQuestions.map(questionElement => {\n    let answersArray = questionElement.incorrect_answers.map(answer => ({\n      text: answer,\n      selected: false,\n      correct: false\n    }));\n    answersArray.push({\n      text: questionElement.correct_answer,\n      selected: false,\n      correct: true\n    });\n    return /*#__PURE__*/_jsxDEV(Question, {\n      question: questionElement.question,\n      answers: answersArray\n    }, nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 10\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-container\",\n    children: [!playingGame && /*#__PURE__*/_jsxDEV(StartScreen, {\n      formData: formData,\n      handleFormChange: handleFormChange,\n      categoryOptions: categoryOptions,\n      startGame: startGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 4\n    }, this), playingGame && /*#__PURE__*/_jsxDEV(PlayScreen, {\n      questionElements: questionElements,\n      toStartScreen: toStartScreen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 3\n  }, this);\n}\n\n_s(App, \"MVd6q4jyMrV8WhcZGURUeTA+4MA=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","nanoid","Question","StartScreen","PlayScreen","App","categories","setCategories","useState","useEffect","fetch","then","res","json","data","trivia_categories","categoryOptions","map","category","id","name","playingGame","setPlayingGame","generateUrl","numQuestions","difficulty","type","formData","startGame","generateNewQuestions","results","setFormData","toStartScreen","questionsArray","setAllQuestions","allQuestions","questionElements","questionElement","answersArray","incorrect_answers","answer","text","selected","correct","push","correct_answer","question","handleFormChange"],"sources":["/Users/grantlj/Documents/React/FreeCodeCamp/quiz-site/src/App.js"],"sourcesContent":["import React from 'react'\nimport {nanoid} from 'nanoid'\nimport Question from './components/Question'\nimport StartScreen from './components/StartScreen'\nimport PlayScreen from './components/PlayScreen'\n\nexport default function App() {\n\n\t// Grab category: id data from API once\n\tconst [categories, setCategories] = React.useState([])\n\tReact.useEffect(() => {\n\t\tfetch(\"https://opentdb.com/api_category.php\")\n\t\t\t.then(res => res.json())\n\t\t\t.then(data => setCategories(data.trivia_categories))\n\t}, [])\n\n\tconst categoryOptions = categories.map(category => (\n\t\t<option \n\t\t\tkey={category.id}\n\t\t\tvalue={category.id}\n\t\t>{category.name}</option>\n\t))\n\n\t// Game state tracks which screen to render\n\tconst [playingGame, setPlayingGame] = React.useState(false)\n\n\tfunction generateUrl() {\n\t\tlet {numQuestions, category, difficulty, type} = formData\n\n\t\tnumQuestions = `amount=${numQuestions}`\n\t\tcategory = category === 0 ? \"\" : `&category=${category}`\n\t\tdifficulty = difficulty === \"\" ? \"\" : `&difficulty=${difficulty}`\n\t\ttype = type === \"\" ? \"\" : `&type=${type}`\n\n\t\treturn `https://opentdb.com/api.php?${numQuestions}\n\t\t\t${category}${difficulty}${type}`\n\t}\n\n\tfunction startGame(){\n\t\tfetch(generateUrl())\n\t\t\t.then(res => res.json())\n\t\t\t.then(data => generateNewQuestions(data.results))\n\n\t\tsetPlayingGame(true)\n\n\t\tsetFormData(\n\t\t\t{\n\t\t\t\tnumQuestions: \"\",\n\t\t\t\tcategory: 0,\n\t\t\t\tdifficulty: \"\",\n\t\t\t\ttype: \"\"\n\t\t\t}\n\t\t)\n\t}\n\n\tfunction toStartScreen(){\n\t\tsetPlayingGame(false)\n\t}\n\n\tfunction generateNewQuestions(questionsArray){\n\t\tsetAllQuestions(questionsArray)\n\t}\n\n\tconst [allQuestions, setAllQuestions] = React.useState([])\n\n\tconst questionElements = allQuestions.map(questionElement => {\n\t\tlet answersArray = questionElement.incorrect_answers.map(answer => \n\t\t\t({\n\t\t\t\ttext: answer,\n\t\t\t\tselected: false,\n\t\t\t\tcorrect: false\n\t\t\t}))\n\t\tanswersArray.push(\n\t\t\t{\n\t\t\t\ttext: questionElement.correct_answer,\n\t\t\t\tselected: false,\n\t\t\t\tcorrect: true\n\t\t\t}\n\t\t) \n\t\treturn <Question \n\t\t\tkey={nanoid()}\n\t\t\tquestion={questionElement.question}\n\t\t\tanswers={answersArray}\n\t\t/>\n\t})\n\n\treturn (\n\t\t<div className=\"main-container\">\n\t\t\t{\n\t\t\t!playingGame && \n\t\t\t<StartScreen \n\t\t\t\tformData={formData}\n\t\t\t\thandleFormChange={handleFormChange}\n\t\t\t\tcategoryOptions={categoryOptions}\n\t\t\t\tstartGame={startGame}\n\t\t\t/>\n\t\t\t}\n\t\t\t{\n\t\t\tplayingGame && \n\t\t\t<PlayScreen \n\t\t\t\tquestionElements={questionElements}\n\t\t\t\ttoStartScreen={toStartScreen}\n\t\t\t/>\n\t\t\t}\n\t\t</div>\n\t)\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}