{"ast":null,"code":"var _jsxFileName = \"/Users/grantlj/Documents/React/FreeCodeCamp/quiz-site/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { nanoid } from 'nanoid';\nimport Question from './components/Question';\nimport StartScreen from './components/StartScreen';\nimport PlayScreen from './components/PlayScreen';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  // Grab category: id data from API once\n  const [categories, setCategories] = React.useState([]);\n  React.useEffect(() => {\n    fetch(\"https://opentdb.com/api_category.php\").then(res => res.json()).then(data => setCategories(data.trivia_categories));\n  }, []);\n  const categoryOptions = categories.map(category => /*#__PURE__*/_jsxDEV(\"option\", {\n    value: category.id,\n    children: category.name\n  }, category.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 3\n  }, this)); // Generate form to hold user input\n\n  const [formData, setFormData] = React.useState({\n    numQuestions: \"\",\n    category: 0,\n    difficulty: \"\",\n    type: \"\"\n  });\n\n  function handleFormChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    setFormData(prevFormData => ({ ...prevFormData,\n      [name]: value\n    }));\n  } // Game state tracks which screen to render\n\n\n  const [playingGame, setPlayingGame] = React.useState(false);\n\n  function generateUrl() {\n    let {\n      numQuestions,\n      category,\n      difficulty,\n      type\n    } = formData;\n    numQuestions = `amount=${numQuestions}`;\n    category = category === 0 ? \"\" : `&category=${category}`;\n    difficulty = difficulty === \"\" ? \"\" : `&difficulty=${difficulty}`;\n    type = type === \"\" ? \"\" : `&type=${type}`;\n    return `https://opentdb.com/api.php?${numQuestions}\n\t\t\t${category}${difficulty}${type}`;\n  }\n\n  function startGame() {\n    fetch(generateUrl()).then(res => res.json()).then(data => generateNewQuestions(data.results));\n    setPlayingGame(true);\n    setFormData({\n      numQuestions: \"\",\n      category: 0,\n      difficulty: \"\",\n      type: \"\"\n    });\n  }\n\n  function toStartScreen() {\n    setAllQuestions([]);\n    setPlayingGame(false);\n  }\n\n  function generateNewQuestions(questionsArray) {\n    setAllQuestions(questionsArray);\n  }\n\n  const [allQuestions, setAllQuestions] = React.useState([]);\n  const questionElements = allQuestions.map(questionElement => {\n    let answersArray = questionElement.incorrect_answers.map(answer => ({\n      id: nanoid(),\n      text: answer,\n      selected: false,\n      correct: false\n    }));\n    let correctId = nanoid();\n    let questionId = nanoid();\n    answersArray.push({\n      id: correctId,\n      text: questionElement.correct_answer,\n      selected: false,\n      correct: true\n    });\n    return /*#__PURE__*/_jsxDEV(Question, {\n      id: questionId,\n      question: questionElement.question,\n      handleAnswerClick: handleAnswerClick,\n      answers: answersArray,\n      correctId: correctId\n    }, questionId, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 10\n    }, this);\n  });\n\n  function handleAnswerClick(questionId, answerId) {\n    console.log(event.target.id);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-container\",\n    children: [!playingGame && /*#__PURE__*/_jsxDEV(StartScreen, {\n      formData: formData,\n      handleFormChange: handleFormChange,\n      categoryOptions: categoryOptions,\n      startGame: startGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 4\n    }, this), playingGame && /*#__PURE__*/_jsxDEV(PlayScreen, {\n      questionElements: questionElements,\n      toStartScreen: toStartScreen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 3\n  }, this);\n}\n\n_s(App, \"K9ioYkiIfS/QQaqOPNeWdQDWcr8=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","nanoid","Question","StartScreen","PlayScreen","App","categories","setCategories","useState","useEffect","fetch","then","res","json","data","trivia_categories","categoryOptions","map","category","id","name","formData","setFormData","numQuestions","difficulty","type","handleFormChange","event","value","target","prevFormData","playingGame","setPlayingGame","generateUrl","startGame","generateNewQuestions","results","toStartScreen","setAllQuestions","questionsArray","allQuestions","questionElements","questionElement","answersArray","incorrect_answers","answer","text","selected","correct","correctId","questionId","push","correct_answer","question","handleAnswerClick","answerId","console","log"],"sources":["/Users/grantlj/Documents/React/FreeCodeCamp/quiz-site/src/App.js"],"sourcesContent":["import React from 'react'\nimport {nanoid} from 'nanoid'\nimport Question from './components/Question'\nimport StartScreen from './components/StartScreen'\nimport PlayScreen from './components/PlayScreen'\n\nexport default function App() {\n\n\t// Grab category: id data from API once\n\tconst [categories, setCategories] = React.useState([])\n\tReact.useEffect(() => {\n\t\tfetch(\"https://opentdb.com/api_category.php\")\n\t\t\t.then(res => res.json())\n\t\t\t.then(data => setCategories(data.trivia_categories))\n\t}, [])\n\n\tconst categoryOptions = categories.map(category => (\n\t\t<option \n\t\t\tkey={category.id}\n\t\t\tvalue={category.id}\n\t\t>{category.name}</option>\n\t))\n\n\t// Generate form to hold user input\n\tconst [formData, setFormData] = React.useState(\n\t\t{\n\t\t\tnumQuestions: \"\",\n\t\t\tcategory: 0,\n\t\t\tdifficulty: \"\",\n\t\t\ttype: \"\"\n\t\t}\n\t)\n\n\tfunction handleFormChange(event) {\n\t\tconst {name, value} = event.target\n\t\tsetFormData(prevFormData => (\n\t\t\t{\n\t\t\t\t...prevFormData,\n\t\t\t\t[name]: value\n\t\t\t}\n\t\t))\n\t}\n\n\t// Game state tracks which screen to render\n\tconst [playingGame, setPlayingGame] = React.useState(false)\n\n\tfunction generateUrl() {\n\t\tlet {numQuestions, category, difficulty, type} = formData\n\n\t\tnumQuestions = `amount=${numQuestions}`\n\t\tcategory = category === 0 ? \"\" : `&category=${category}`\n\t\tdifficulty = difficulty === \"\" ? \"\" : `&difficulty=${difficulty}`\n\t\ttype = type === \"\" ? \"\" : `&type=${type}`\n\n\t\treturn `https://opentdb.com/api.php?${numQuestions}\n\t\t\t${category}${difficulty}${type}`\n\t}\n\n\tfunction startGame(){\n\t\tfetch(generateUrl())\n\t\t\t.then(res => res.json())\n\t\t\t.then(data => generateNewQuestions(data.results))\n\n\t\tsetPlayingGame(true)\n\n\t\tsetFormData(\n\t\t\t{\n\t\t\t\tnumQuestions: \"\",\n\t\t\t\tcategory: 0,\n\t\t\t\tdifficulty: \"\",\n\t\t\t\ttype: \"\"\n\t\t\t}\n\t\t)\n\t}\n\n\tfunction toStartScreen(){\n\t\tsetAllQuestions([])\n\t\tsetPlayingGame(false)\n\t}\n\n\tfunction generateNewQuestions(questionsArray){\n\t\tsetAllQuestions(questionsArray)\n\t}\n\n\tconst [allQuestions, setAllQuestions] = React.useState([])\n\n\tconst questionElements = allQuestions.map(questionElement => {\n\t\tlet answersArray = questionElement.incorrect_answers.map(answer => (\n\t\t\t{\n\t\t\t\tid: nanoid(),\n\t\t\t\ttext: answer,\n\t\t\t\tselected: false,\n\t\t\t\tcorrect: false\n\t\t\t}\n\t\t))\n\t\tlet correctId = nanoid()\n\t\tlet questionId = nanoid()\n\t\tanswersArray.push(\n\t\t\t{\n\t\t\t\tid: correctId,\n\t\t\t\ttext: questionElement.correct_answer,\n\t\t\t\tselected: false,\n\t\t\t\tcorrect: true\n\t\t\t}\n\t\t) \n\t\treturn <Question \n\t\t\tkey={questionId}\n\t\t\tid={questionId}\n\t\t\tquestion={questionElement.question}\n\t\t\thandleAnswerClick={handleAnswerClick}\n\t\t\tanswers={answersArray}\n\t\t\tcorrectId={correctId}\n\t\t/>\n\t})\n\n\tfunction handleAnswerClick(questionId, answerId){\n        console.log(event.target.id)\n        \n    }\n\n\treturn (\n\t\t<div className=\"main-container\">\n\t\t\t{\n\t\t\t!playingGame && \n\t\t\t<StartScreen \n\t\t\t\tformData={formData}\n\t\t\t\thandleFormChange={handleFormChange}\n\t\t\t\tcategoryOptions={categoryOptions}\n\t\t\t\tstartGame={startGame}\n\t\t\t/>\n\t\t\t}\n\t\t\t{\n\t\t\tplayingGame && \n\t\t\t<PlayScreen \n\t\t\t\tquestionElements={questionElements}\n\t\t\t\ttoStartScreen={toStartScreen}\n\t\t\t/>\n\t\t\t}\n\t\t</div>\n\t)\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}