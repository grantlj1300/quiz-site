{"ast":null,"code":"var _jsxFileName = \"/Users/grantlj/Documents/React/FreeCodeCamp/quiz-site/src/components/PlayScreen.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport Question from \"./Question\";\nimport { nanoid } from \"nanoid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PlayScreen(props) {\n  _s();\n\n  const {\n    playingGame,\n    toStartScreen,\n    toEndGame,\n    gameQuestionsDirty\n  } = props;\n  const [allQuestions, setAllQuestions] = React.useState([]);\n  React.useEffect(() => {\n    setAllQuestions(gameQuestionsDirty.map((question, index) => {\n      let answersArray = question.incorrect_answers.map(answer => ({\n        id: nanoid(),\n        text: answer\n      }));\n      answersArray.push({\n        id: nanoid(),\n        text: question.correct_answer\n      });\n      let correctId = answersArray[answersArray.length - 1].id;\n\n      for (let i = answersArray.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        let temp = answersArray[i];\n        answersArray[i] = answersArray[j];\n        answersArray[j] = temp;\n      }\n\n      return {\n        id: index,\n        answers: answersArray,\n        question: question.question,\n        selectedId: undefined,\n        correctId: correctId\n      };\n    }));\n  }, [gameQuestionsDirty]);\n\n  function handleAnswerClick(event, questionId) {\n    setAllQuestions(prevQuestions => prevQuestions.map(question => {\n      if (question.id === questionId) {\n        return question.selectedId === event.target.id ? { ...question,\n          selectedId: undefined\n        } : { ...question,\n          selectedId: event.target.id\n        };\n      } else {\n        return question;\n      }\n    }));\n  }\n\n  function totalCorrect() {\n    let correctCount = 0;\n    allQuestions.forEach(question => {\n      question.answers.forEach(answer => {\n        correctCount += answer.correct && answer.selected ? 1 : 0;\n      });\n    });\n    return correctCount;\n  } // Generate question elements to display\n\n\n  if (allQuestions.length) {\n    const questionElements = allQuestions.map(questionElement => {\n      return /*#__PURE__*/_jsxDEV(Question, {\n        id: questionElement.id,\n        questionText: questionElement.question,\n        questionAnswers: questionElement.answers,\n        playingGame: playingGame,\n        handleAnswerClick: handleAnswerClick\n      }, questionElement.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 10\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"play-screen\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-container\",\n        children: questionElements\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this), playingGame && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"submit-button\",\n        onClick: () => toEndGame(allQuestions),\n        children: \"Check Answers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }, this), !playingGame && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"play-again-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"score\",\n          children: [\"You scored \", totalCorrect(), \"/\", questionElements.length, \" correct answers\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"play-again-button\",\n          onClick: toStartScreen,\n          children: \"Play Again\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this);\n  }\n}\n\n_s(PlayScreen, \"gWJXvTk86Cf1IQDy7F3uceGT5+4=\");\n\n_c = PlayScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlayScreen\");","map":{"version":3,"names":["React","Question","nanoid","PlayScreen","props","playingGame","toStartScreen","toEndGame","gameQuestionsDirty","allQuestions","setAllQuestions","useState","useEffect","map","question","index","answersArray","incorrect_answers","answer","id","text","push","correct_answer","correctId","length","i","j","Math","floor","random","temp","answers","selectedId","undefined","handleAnswerClick","event","questionId","prevQuestions","target","totalCorrect","correctCount","forEach","correct","selected","questionElements","questionElement"],"sources":["/Users/grantlj/Documents/React/FreeCodeCamp/quiz-site/src/components/PlayScreen.js"],"sourcesContent":["import React from \"react\"\nimport Question from \"./Question\"\nimport {nanoid} from \"nanoid\"\n\nexport default function PlayScreen(props) {\n\n    const {playingGame, toStartScreen, toEndGame, gameQuestionsDirty} = props\n\n    const [allQuestions, setAllQuestions] = React.useState([])\n\n    React.useEffect(() => {\n        setAllQuestions(gameQuestionsDirty.map((question, index) => {\n            let answersArray = question.incorrect_answers.map(answer => (\n                {\n                    id: nanoid(),\n                    text: answer\n                }\n            ))\n            answersArray.push(\n                {\n                    id: nanoid(),\n                    text: question.correct_answer\n                }\n            )\n            let correctId = answersArray[answersArray.length - 1].id\n            for (let i = answersArray.length - 1; i > 0; i--) {\n                let j = Math.floor(Math.random() * (i + 1))\n                let temp = answersArray[i]\n                answersArray[i] = answersArray[j]\n                answersArray[j] = temp\n            }\n            return  {\n                id: index,\n                answers: answersArray,\n                question: question.question,\n                selectedId: undefined,\n                correctId: correctId\n            }\n        }))\n    }, [gameQuestionsDirty])\n\n    function handleAnswerClick(event, questionId){\n\t\tsetAllQuestions(prevQuestions => prevQuestions.map(question => {\n            if(question.id === questionId){\n                return question.selectedId === event.target.id ?\n                    {...question, selectedId: undefined } : \n                    {...question, selectedId: event.target.id }\n            }\n            else{\n                return question\n            }\n        }))\n    }\n\n    function totalCorrect(){\n        let correctCount = 0\n        allQuestions.forEach(question => {\n\t\t\tquestion.answers.forEach(answer => {\n\t\t\t\tcorrectCount += answer.correct && answer.selected ? 1 : 0\n\t\t\t})\n\t\t})\n        return correctCount\n    }\n\n    // Generate question elements to display\n    if(allQuestions.length){\n\tconst questionElements = allQuestions.map(questionElement => {\n\t\treturn <Question \n\t\t\tkey={questionElement.id}\n\t\t\tid={questionElement.id}\n\t\t\tquestionText={questionElement.question}\n\t\t\tquestionAnswers={questionElement.answers}\n\t\t\tplayingGame={playingGame}\n            handleAnswerClick={handleAnswerClick}\n\t\t/>\n\t})\n\n    return (\n        <div className=\"play-screen\">\n            <div className=\"question-container\">\n                {questionElements}\n            </div>\n\n            {playingGame && \n            <button className=\"submit-button\" onClick={() => toEndGame(allQuestions)}>\n                Check Answers\n            </button>}\n\n            {!playingGame && <div className=\"play-again-container\">\n                <h2 className=\"score\">\n                    You scored {totalCorrect()}/{questionElements.length} correct answers\n                </h2>\n                <button className=\"play-again-button\" onClick={toStartScreen}>\n                    Play Again\n                </button>\n            </div>}\n        </div>\n    )}\n} "],"mappings":"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"},"metadata":{},"sourceType":"module"}