{"ast":null,"code":"var _jsxFileName = \"/Users/grantlj/Documents/React/FreeCodeCamp/quiz-site/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { nanoid } from 'nanoid';\nimport Question from './components/Question';\nimport StartScreen from './components/StartScreen';\nimport PlayScreen from './components/PlayScreen';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  // Grab category: id data from API once\n  const [categories, setCategories] = React.useState([]);\n  React.useEffect(() => {\n    fetch(\"https://opentdb.com/api_category.php\").then(res => res.json()).then(data => setCategories(data.trivia_categories));\n  }, []);\n  const categoryOptions = categories.map(category => /*#__PURE__*/_jsxDEV(\"option\", {\n    value: category.id,\n    children: category.name\n  }, category.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 3\n  }, this)); // Generate form to hold user input\n\n  const [formData, setFormData] = React.useState({\n    numQuestions: \"\",\n    category: 0,\n    difficulty: \"\",\n    type: \"\"\n  });\n\n  function handleFormChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    setFormData(prevFormData => ({ ...prevFormData,\n      [name]: value\n    }));\n  } // Game state tracks which screen to render\n\n\n  const [gameState, setGameState] = React.useState(\"startGame\");\n\n  function generateUrl() {\n    let {\n      numQuestions,\n      category,\n      difficulty,\n      type\n    } = formData;\n    numQuestions = `amount=${numQuestions}`;\n    category = category === 0 ? \"\" : `&category=${category}`;\n    difficulty = difficulty === \"\" ? \"\" : `&difficulty=${difficulty}`;\n    type = type === \"\" ? \"\" : `&type=${type}`;\n    return `https://opentdb.com/api.php?${numQuestions}\n\t\t\t${category}${difficulty}${type}`;\n  }\n\n  function startGame() {\n    fetch(generateUrl()).then(res => res.json()).then(data => generateNewQuestions(data.results));\n    setGameState(\"playingGame\");\n    setFormData({\n      numQuestions: \"\",\n      category: 0,\n      difficulty: \"\",\n      type: \"\"\n    });\n  }\n\n  function toStartScreen() {\n    setAllQuestions([]);\n    setGameState(\"startGame\");\n  }\n\n  function toEndGame() {\n    // let correctAnswers = 0\n    // for (let i = 0; i < allQuestions.length; i++) {\n    // \tallQuestions[i]\n    // }\n    setAllQuestions();\n    setGameState(\"endGame\");\n  }\n\n  function generateNewQuestions(questionsArray) {\n    let questions = [];\n\n    for (let i = 0; i < questionsArray.length; i++) {\n      let answersArray = questionsArray[i].incorrect_answers.map(answer => ({\n        id: nanoid(),\n        text: answer,\n        selected: false,\n        correct: false\n      }));\n      answersArray.push({\n        id: nanoid(),\n        text: questionsArray[i].correct_answer,\n        selected: false,\n        correct: true\n      });\n      questions[i] = {\n        id: i,\n        answers: answersArray,\n        question: questionsArray[i].question\n      };\n    }\n\n    setAllQuestions(questions);\n  }\n\n  const [allQuestions, setAllQuestions] = React.useState([]);\n  const questionElements = allQuestions.map(questionElement => {\n    return /*#__PURE__*/_jsxDEV(Question, {\n      id: questionElement.id,\n      question: questionElement.question,\n      handleAnswerClick: handleAnswerClick,\n      answers: questionElement.answers,\n      gameState: gameState\n    }, questionElement.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 10\n    }, this);\n  });\n\n  function handleAnswerClick(event, questionIndex) {\n    setAllQuestions(prevQuestions => prevQuestions.map(question => {\n      console.log(question.id, questionIndex);\n\n      if (question.id === questionIndex) {\n        let updatedAnswers = question.answers.map(answer => event.target.id === answer.id ? { ...answer,\n          selected: !answer.selected\n        } : { ...answer,\n          selected: false\n        });\n        return { ...question,\n          answers: updatedAnswers\n        };\n      } else {\n        return { ...question\n        };\n      }\n    }));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-container\",\n    children: [gameState === \"startGame\" && /*#__PURE__*/_jsxDEV(StartScreen, {\n      formData: formData,\n      handleFormChange: handleFormChange,\n      categoryOptions: categoryOptions,\n      startGame: startGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 4\n    }, this), (gameState === \"playingGame\" || gameState === \"endGame\") && /*#__PURE__*/_jsxDEV(PlayScreen, {\n      playingGame: gameState === \"playingGame\" ? true : false,\n      questionElements: questionElements,\n      toStartScreen: toStartScreen,\n      toEndGame: toEndGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 3\n  }, this);\n}\n\n_s(App, \"U9qXkJegdw12+md1okNaG+0bX0M=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","nanoid","Question","StartScreen","PlayScreen","App","categories","setCategories","useState","useEffect","fetch","then","res","json","data","trivia_categories","categoryOptions","map","category","id","name","formData","setFormData","numQuestions","difficulty","type","handleFormChange","event","value","target","prevFormData","gameState","setGameState","generateUrl","startGame","generateNewQuestions","results","toStartScreen","setAllQuestions","toEndGame","questionsArray","questions","i","length","answersArray","incorrect_answers","answer","text","selected","correct","push","correct_answer","answers","question","allQuestions","questionElements","questionElement","handleAnswerClick","questionIndex","prevQuestions","console","log","updatedAnswers"],"sources":["/Users/grantlj/Documents/React/FreeCodeCamp/quiz-site/src/App.js"],"sourcesContent":["import React from 'react'\nimport {nanoid} from 'nanoid'\nimport Question from './components/Question'\nimport StartScreen from './components/StartScreen'\nimport PlayScreen from './components/PlayScreen'\n\nexport default function App() {\n\n\t// Grab category: id data from API once\n\tconst [categories, setCategories] = React.useState([])\n\tReact.useEffect(() => {\n\t\tfetch(\"https://opentdb.com/api_category.php\")\n\t\t\t.then(res => res.json())\n\t\t\t.then(data => setCategories(data.trivia_categories))\n\t}, [])\n\n\tconst categoryOptions = categories.map(category => (\n\t\t<option \n\t\t\tkey={category.id}\n\t\t\tvalue={category.id}\n\t\t>{category.name}</option>\n\t))\n\n\t// Generate form to hold user input\n\tconst [formData, setFormData] = React.useState(\n\t\t{\n\t\t\tnumQuestions: \"\",\n\t\t\tcategory: 0,\n\t\t\tdifficulty: \"\",\n\t\t\ttype: \"\"\n\t\t}\n\t)\n\n\tfunction handleFormChange(event) {\n\t\tconst {name, value} = event.target\n\t\tsetFormData(prevFormData => (\n\t\t\t{\n\t\t\t\t...prevFormData,\n\t\t\t\t[name]: value\n\t\t\t}\n\t\t))\n\t}\n\n\t// Game state tracks which screen to render\n\tconst [gameState, setGameState] = React.useState(\"startGame\")\n\n\tfunction generateUrl() {\n\t\tlet {numQuestions, category, difficulty, type} = formData\n\n\t\tnumQuestions = `amount=${numQuestions}`\n\t\tcategory = category === 0 ? \"\" : `&category=${category}`\n\t\tdifficulty = difficulty === \"\" ? \"\" : `&difficulty=${difficulty}`\n\t\ttype = type === \"\" ? \"\" : `&type=${type}`\n\n\t\treturn `https://opentdb.com/api.php?${numQuestions}\n\t\t\t${category}${difficulty}${type}`\n\t}\n\n\tfunction startGame(){\n\t\tfetch(generateUrl())\n\t\t\t.then(res => res.json())\n\t\t\t.then(data => generateNewQuestions(data.results))\n\n\t\tsetGameState(\"playingGame\")\n\n\t\tsetFormData(\n\t\t\t{\n\t\t\t\tnumQuestions: \"\",\n\t\t\t\tcategory: 0,\n\t\t\t\tdifficulty: \"\",\n\t\t\t\ttype: \"\"\n\t\t\t}\n\t\t)\n\t}\n\n\tfunction toStartScreen(){\n\t\tsetAllQuestions([])\n\t\tsetGameState(\"startGame\")\n\t}\n\n\tfunction toEndGame(){\n\t\t// let correctAnswers = 0\n\t\t// for (let i = 0; i < allQuestions.length; i++) {\n\t\t// \tallQuestions[i]\n\t\t// }\n\t\tsetAllQuestions()\n\t\tsetGameState(\"endGame\")\n\t}\n\n\tfunction generateNewQuestions(questionsArray){\n\t\tlet questions = []\n\t\tfor (let i = 0; i < questionsArray.length; i++) {\n\t\t\tlet answersArray = questionsArray[i].incorrect_answers.map(answer => (\n\t\t\t\t{\n\t\t\t\t\tid: nanoid(),\n\t\t\t\t\ttext: answer,\n\t\t\t\t\tselected: false,\n\t\t\t\t\tcorrect: false\n\t\t\t\t}\n\t\t\t))\n\t\t\tanswersArray.push(\n\t\t\t\t{\n\t\t\t\t\tid: nanoid(),\n\t\t\t\t\ttext: questionsArray[i].correct_answer,\n\t\t\t\t\tselected: false,\n\t\t\t\t\tcorrect: true\n\t\t\t\t}\n\t\t\t) \n\t\t\tquestions[i] = \n\t\t\t{\n\t\t\t\tid: i,\n\t\t\t\tanswers: answersArray,\n\t\t\t\tquestion: questionsArray[i].question\n\t\t\t}\n\t\t}\n\t\tsetAllQuestions(questions)\n\t}\n\n\tconst [allQuestions, setAllQuestions] = React.useState([])\n\n\tconst questionElements = allQuestions.map(questionElement => {\n\t\treturn <Question \n\t\t\tkey={questionElement.id}\n\t\t\tid={questionElement.id}\n\t\t\tquestion={questionElement.question}\n\t\t\thandleAnswerClick={handleAnswerClick}\n\t\t\tanswers={questionElement.answers}\n\t\t\tgameState={gameState}\n\t\t/>\n\t})\n\n\tfunction handleAnswerClick(event, questionIndex){\n\t\tsetAllQuestions(prevQuestions => prevQuestions.map(question => {\n\t\t\tconsole.log(question.id, questionIndex)\n\t\t\tif (question.id === questionIndex) {\n\t\t\t\tlet updatedAnswers = question.answers.map(answer => (\n\t\t\t\t\tevent.target.id === answer.id ? \n                \t{...answer, selected: !answer.selected} : {...answer, selected: false}\n\t\t\t\t))\n\t\t\t\treturn {...question, answers: updatedAnswers}\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn {...question}\n\t\t\t}\n\t\t}\n\t\t))\n    }\n\n\treturn (\n\t\t<div className=\"main-container\">\n\t\t\t{\n\t\t\tgameState === \"startGame\" && \n\t\t\t<StartScreen \n\t\t\t\tformData={formData}\n\t\t\t\thandleFormChange={handleFormChange}\n\t\t\t\tcategoryOptions={categoryOptions}\n\t\t\t\tstartGame={startGame}\n\t\t\t/>\n\t\t\t}\n\t\t\t{\n\t\t\t(gameState === \"playingGame\" || gameState === \"endGame\")&& \n\t\t\t<PlayScreen \n\t\t\t\tplayingGame={gameState === \"playingGame\" ? true : false}\n\t\t\t\tquestionElements={questionElements}\n\t\t\t\ttoStartScreen={toStartScreen}\n\t\t\t\ttoEndGame={toEndGame}\n\t\t\t/>\n\t\t\t}\n\t\t</div>\n\t)\n}"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,MAAR,QAAqB,QAArB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;;AAEA,eAAe,SAASC,GAAT,GAAe;EAAA;;EAE7B;EACA,MAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BP,KAAK,CAACQ,QAAN,CAAe,EAAf,CAApC;EACAR,KAAK,CAACS,SAAN,CAAgB,MAAM;IACrBC,KAAK,CAAC,sCAAD,CAAL,CACEC,IADF,CACOC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADd,EAEEF,IAFF,CAEOG,IAAI,IAAIP,aAAa,CAACO,IAAI,CAACC,iBAAN,CAF5B;EAGA,CAJD,EAIG,EAJH;EAMA,MAAMC,eAAe,GAAGV,UAAU,CAACW,GAAX,CAAeC,QAAQ,iBAC9C;IAEC,KAAK,EAAEA,QAAQ,CAACC,EAFjB;IAAA,UAGED,QAAQ,CAACE;EAHX,GACMF,QAAQ,CAACC,EADf;IAAA;IAAA;IAAA;EAAA,QADuB,CAAxB,CAV6B,CAiB7B;;EACA,MAAM,CAACE,QAAD,EAAWC,WAAX,IAA0BtB,KAAK,CAACQ,QAAN,CAC/B;IACCe,YAAY,EAAE,EADf;IAECL,QAAQ,EAAE,CAFX;IAGCM,UAAU,EAAE,EAHb;IAICC,IAAI,EAAE;EAJP,CAD+B,CAAhC;;EASA,SAASC,gBAAT,CAA0BC,KAA1B,EAAiC;IAChC,MAAM;MAACP,IAAD;MAAOQ;IAAP,IAAgBD,KAAK,CAACE,MAA5B;IACAP,WAAW,CAACQ,YAAY,KACvB,EACC,GAAGA,YADJ;MAEC,CAACV,IAAD,GAAQQ;IAFT,CADuB,CAAb,CAAX;EAMA,CAnC4B,CAqC7B;;;EACA,MAAM,CAACG,SAAD,EAAYC,YAAZ,IAA4BhC,KAAK,CAACQ,QAAN,CAAe,WAAf,CAAlC;;EAEA,SAASyB,WAAT,GAAuB;IACtB,IAAI;MAACV,YAAD;MAAeL,QAAf;MAAyBM,UAAzB;MAAqCC;IAArC,IAA6CJ,QAAjD;IAEAE,YAAY,GAAI,UAASA,YAAa,EAAtC;IACAL,QAAQ,GAAGA,QAAQ,KAAK,CAAb,GAAiB,EAAjB,GAAuB,aAAYA,QAAS,EAAvD;IACAM,UAAU,GAAGA,UAAU,KAAK,EAAf,GAAoB,EAApB,GAA0B,eAAcA,UAAW,EAAhE;IACAC,IAAI,GAAGA,IAAI,KAAK,EAAT,GAAc,EAAd,GAAoB,SAAQA,IAAK,EAAxC;IAEA,OAAQ,+BAA8BF,YAAa;AACrD,KAAKL,QAAS,GAAEM,UAAW,GAAEC,IAAK,EADhC;EAEA;;EAED,SAASS,SAAT,GAAoB;IACnBxB,KAAK,CAACuB,WAAW,EAAZ,CAAL,CACEtB,IADF,CACOC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADd,EAEEF,IAFF,CAEOG,IAAI,IAAIqB,oBAAoB,CAACrB,IAAI,CAACsB,OAAN,CAFnC;IAIAJ,YAAY,CAAC,aAAD,CAAZ;IAEAV,WAAW,CACV;MACCC,YAAY,EAAE,EADf;MAECL,QAAQ,EAAE,CAFX;MAGCM,UAAU,EAAE,EAHb;MAICC,IAAI,EAAE;IAJP,CADU,CAAX;EAQA;;EAED,SAASY,aAAT,GAAwB;IACvBC,eAAe,CAAC,EAAD,CAAf;IACAN,YAAY,CAAC,WAAD,CAAZ;EACA;;EAED,SAASO,SAAT,GAAoB;IACnB;IACA;IACA;IACA;IACAD,eAAe;IACfN,YAAY,CAAC,SAAD,CAAZ;EACA;;EAED,SAASG,oBAAT,CAA8BK,cAA9B,EAA6C;IAC5C,IAAIC,SAAS,GAAG,EAAhB;;IACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,cAAc,CAACG,MAAnC,EAA2CD,CAAC,EAA5C,EAAgD;MAC/C,IAAIE,YAAY,GAAGJ,cAAc,CAACE,CAAD,CAAd,CAAkBG,iBAAlB,CAAoC5B,GAApC,CAAwC6B,MAAM,KAChE;QACC3B,EAAE,EAAElB,MAAM,EADX;QAEC8C,IAAI,EAAED,MAFP;QAGCE,QAAQ,EAAE,KAHX;QAICC,OAAO,EAAE;MAJV,CADgE,CAA9C,CAAnB;MAQAL,YAAY,CAACM,IAAb,CACC;QACC/B,EAAE,EAAElB,MAAM,EADX;QAEC8C,IAAI,EAAEP,cAAc,CAACE,CAAD,CAAd,CAAkBS,cAFzB;QAGCH,QAAQ,EAAE,KAHX;QAICC,OAAO,EAAE;MAJV,CADD;MAQAR,SAAS,CAACC,CAAD,CAAT,GACA;QACCvB,EAAE,EAAEuB,CADL;QAECU,OAAO,EAAER,YAFV;QAGCS,QAAQ,EAAEb,cAAc,CAACE,CAAD,CAAd,CAAkBW;MAH7B,CADA;IAMA;;IACDf,eAAe,CAACG,SAAD,CAAf;EACA;;EAED,MAAM,CAACa,YAAD,EAAehB,eAAf,IAAkCtC,KAAK,CAACQ,QAAN,CAAe,EAAf,CAAxC;EAEA,MAAM+C,gBAAgB,GAAGD,YAAY,CAACrC,GAAb,CAAiBuC,eAAe,IAAI;IAC5D,oBAAO,QAAC,QAAD;MAEN,EAAE,EAAEA,eAAe,CAACrC,EAFd;MAGN,QAAQ,EAAEqC,eAAe,CAACH,QAHpB;MAIN,iBAAiB,EAAEI,iBAJb;MAKN,OAAO,EAAED,eAAe,CAACJ,OALnB;MAMN,SAAS,EAAErB;IANL,GACDyB,eAAe,CAACrC,EADf;MAAA;MAAA;MAAA;IAAA,QAAP;EAQA,CATwB,CAAzB;;EAWA,SAASsC,iBAAT,CAA2B9B,KAA3B,EAAkC+B,aAAlC,EAAgD;IAC/CpB,eAAe,CAACqB,aAAa,IAAIA,aAAa,CAAC1C,GAAd,CAAkBoC,QAAQ,IAAI;MAC9DO,OAAO,CAACC,GAAR,CAAYR,QAAQ,CAAClC,EAArB,EAAyBuC,aAAzB;;MACA,IAAIL,QAAQ,CAAClC,EAAT,KAAgBuC,aAApB,EAAmC;QAClC,IAAII,cAAc,GAAGT,QAAQ,CAACD,OAAT,CAAiBnC,GAAjB,CAAqB6B,MAAM,IAC/CnB,KAAK,CAACE,MAAN,CAAaV,EAAb,KAAoB2B,MAAM,CAAC3B,EAA3B,GACY,EAAC,GAAG2B,MAAJ;UAAYE,QAAQ,EAAE,CAACF,MAAM,CAACE;QAA9B,CADZ,GACsD,EAAC,GAAGF,MAAJ;UAAYE,QAAQ,EAAE;QAAtB,CAFlC,CAArB;QAIA,OAAO,EAAC,GAAGK,QAAJ;UAAcD,OAAO,EAAEU;QAAvB,CAAP;MACA,CAND,MAOK;QACJ,OAAO,EAAC,GAAGT;QAAJ,CAAP;MACA;IACD,CAZgC,CAAlB,CAAf;EAcG;;EAEJ,oBACC;IAAK,SAAS,EAAC,gBAAf;IAAA,WAECtB,SAAS,KAAK,WAAd,iBACA,QAAC,WAAD;MACC,QAAQ,EAAEV,QADX;MAEC,gBAAgB,EAAEK,gBAFnB;MAGC,eAAe,EAAEV,eAHlB;MAIC,SAAS,EAAEkB;IAJZ;MAAA;MAAA;MAAA;IAAA,QAHD,EAWC,CAACH,SAAS,KAAK,aAAd,IAA+BA,SAAS,KAAK,SAA9C,kBACA,QAAC,UAAD;MACC,WAAW,EAAEA,SAAS,KAAK,aAAd,GAA8B,IAA9B,GAAqC,KADnD;MAEC,gBAAgB,EAAEwB,gBAFnB;MAGC,aAAa,EAAElB,aAHhB;MAIC,SAAS,EAAEE;IAJZ;MAAA;MAAA;MAAA;IAAA,QAZD;EAAA;IAAA;IAAA;IAAA;EAAA,QADD;AAsBA;;GApKuBlC,G;;KAAAA,G"},"metadata":{},"sourceType":"module"}