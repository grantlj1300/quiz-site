{"ast":null,"code":"var _jsxFileName = \"/Users/grantlj/Documents/React/FreeCodeCamp/quiz-site/src/components/Question.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { nanoid } from 'nanoid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Question(props) {\n  _s();\n\n  const {\n    id,\n    questionText,\n    questionAnswers,\n    playingGame,\n    updateEndGameStats\n  } = props;\n  const [questionBlock, setQuestionBlock] = React.useState(generateNewQuestion());\n\n  function generateNewQuestion() {\n    let answersArray = questionAnswers.map(answer => ({\n      id: nanoid(),\n      text: answer,\n      selected: false,\n      correct: false\n    }));\n    answersArray[answersArray.length - 1].correct = true;\n\n    for (let i = answersArray.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      let temp = answersArray[i];\n      answersArray[i] = answersArray[j];\n      answersArray[j] = temp;\n    }\n\n    return {\n      id: id,\n      answers: answersArray,\n      question: questionText\n    };\n  }\n\n  function answerStyle(answer) {\n    if (playingGame) {\n      return answer.selected ? \" selected\" : \"\";\n    } else {\n      if (answer.correct) {\n        return \" correct\";\n      } else if (answer.selected) {\n        return \" incorrect\";\n      } else {\n        return \" blank\";\n      }\n    }\n  }\n\n  function handleAnswerClick(event) {\n    //updateEndGameStats(correctAdd, answeredAdd)\n    setQuestionBlock(prevBlock => {\n      let updatedAnswers = prevBlock.answers.map(answer => event.target.id === answer.id ? { ...answer,\n        selected: !answer.selected\n      } : { ...answer,\n        selected: false\n      });\n      return { ...prevBlock,\n        answers: updatedAnswers\n      };\n    });\n  }\n\n  const answerElements = questionBlock.answers.map(answer => /*#__PURE__*/_jsxDEV(\"button\", {\n    className: `question-answer${answerStyle(answer)}`,\n    id: answer.id,\n    onClick: playingGame ? event => handleAnswerClick(event) : undefined,\n    dangerouslySetInnerHTML: {\n      __html: answer.text\n    }\n  }, answer.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"question\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"question-header\",\n      dangerouslySetInnerHTML: {\n        __html: questionBlock.question\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-choices\",\n      children: answerElements\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Question, \"0os9u8BfzClHIsiaGaAi09x/304=\");\n\n_c = Question;\n\nvar _c;\n\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"names":["React","nanoid","Question","props","id","questionText","questionAnswers","playingGame","updateEndGameStats","questionBlock","setQuestionBlock","useState","generateNewQuestion","answersArray","map","answer","text","selected","correct","length","i","j","Math","floor","random","temp","answers","question","answerStyle","handleAnswerClick","event","prevBlock","updatedAnswers","target","answerElements","undefined","__html"],"sources":["/Users/grantlj/Documents/React/FreeCodeCamp/quiz-site/src/components/Question.js"],"sourcesContent":["import React from 'react'\nimport {nanoid} from 'nanoid'\n\nexport default function Question(props) {\n\n    const {id, questionText, questionAnswers, playingGame, updateEndGameStats} = props\n\n    const [questionBlock, setQuestionBlock] = React.useState(generateNewQuestion())\n\n    function generateNewQuestion(){\n        let answersArray = questionAnswers.map(answer => (\n            {\n                id: nanoid(),\n                text: answer,\n                selected: false,\n                correct: false\n            }\n        ))\n        answersArray[answersArray.length - 1].correct = true\n        for (let i = answersArray.length - 1; i > 0; i--) {\n            let j = Math.floor(Math.random() * (i + 1));\n            let temp = answersArray[i];\n            answersArray[i] = answersArray[j];\n            answersArray[j] = temp;\n        }\n        return  {\n                    id: id,\n                    answers: answersArray,\n                    question: questionText\n                }\n        }\n\n    function answerStyle(answer){\n        if(playingGame){\n            return answer.selected ? \" selected\" : \"\"\n        }\n        else{\n            if(answer.correct){\n                return \" correct\"\n            }\n            else if(answer.selected){\n                return \" incorrect\"\n            }\n            else {\n                return \" blank\"\n            }\n        }\n    }\n\n    function handleAnswerClick(event){\n\n        //updateEndGameStats(correctAdd, answeredAdd)\n\t\tsetQuestionBlock(prevBlock => {\n            let updatedAnswers = prevBlock.answers.map(answer => (\n                event.target.id === answer.id ? \n                {...answer, selected: !answer.selected} : {...answer, selected: false}\n            ))\n            return {...prevBlock, answers: updatedAnswers}\n\t\t})\n    }\n\n    const answerElements = questionBlock.answers.map(answer => (\n        <button className={`question-answer${answerStyle(answer)}`}\n                key={answer.id}\n                id={answer.id}\n                onClick={playingGame ? \n                (event) => handleAnswerClick(event) : undefined}\n                dangerouslySetInnerHTML={{__html: answer.text}}\n        >\n        </button>\n    ))\n\n    return (\n        <div className=\"question\">\n            <h2 className=\"question-header\"\n                dangerouslySetInnerHTML={{__html: questionBlock.question}}\n            >\n            </h2>\n            <div className=\"question-choices\">\n                {answerElements}\n            </div>\n        </div>\n    )\n} "],"mappings":"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"},"metadata":{},"sourceType":"module"}