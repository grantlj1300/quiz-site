{"ast":null,"code":"var _jsxFileName = \"/Users/grantlj/Documents/React/FreeCodeCamp/quiz-site/src/components/PlayScreen.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport Question from \"./Question\";\nimport { nanoid } from \"nanoid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PlayScreen(props) {\n  _s();\n\n  const {\n    playingGame,\n    toStartScreen,\n    toEndGame,\n    gameQuestionsDirty\n  } = props;\n  const [allQuestions, setAllQuestions] = React.useState([]);\n  React.useEffect(() => {\n    setAllQuestions(gameQuestionsDirty.map((question, index) => {\n      let answersArray = question.incorrect_answers.map(answer => ({\n        id: nanoid(),\n        text: answer,\n        selected: false,\n        correct: false\n      }));\n      answersArray.push({\n        id: nanoid(),\n        text: question.correct_answer,\n        selected: false,\n        correct: true\n      });\n      let correctId = answersArray[answersArray.length - 1].id;\n\n      for (let i = answersArray.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        let temp = answersArray[i];\n        answersArray[i] = answersArray[j];\n        answersArray[j] = temp;\n      }\n\n      return {\n        id: index,\n        answers: answersArray,\n        question: question.question,\n        selectedId: undefined,\n        correctId: correctId\n      };\n    }));\n  }, [gameQuestionsDirty]);\n\n  function handleAnswerClick(event, questionId) {\n    setAllQuestions(prevQuestions => prevQuestions.map(question => {\n      if (question.id === questionId) {\n        let newAnswers = question.answers.map(answer => {\n          if (event.target.id === answer.id) {\n            return { ...answer,\n              selected: !answer.selected\n            };\n          } else {\n            return { ...answer,\n              selected: false\n            };\n          }\n        });\n        return { ...question,\n          answers: newAnswers\n        };\n      } else {\n        return question;\n      }\n    }));\n  }\n\n  function totalCorrect() {\n    let correctCount = 0;\n    allQuestions.forEach(question => {\n      question.answers.forEach(answer => {\n        correctCount += answer.correct && answer.selected ? 1 : 0;\n      });\n    });\n    return correctCount;\n  } // Generate question elements to display\n\n\n  if (allQuestions.length) {\n    const questionElements = allQuestions.map(questionElement => {\n      return /*#__PURE__*/_jsxDEV(Question, {\n        id: questionElement.id,\n        questionText: questionElement.question,\n        questionAnswers: questionElement.answers,\n        playingGame: playingGame,\n        handleAnswerClick: handleAnswerClick\n      }, questionElement.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"play-screen\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-container\",\n        children: questionElements\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), playingGame && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"submit-button\",\n        onClick: () => toEndGame(allQuestions),\n        children: \"Check Answers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this), !playingGame && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"play-again-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"score\",\n          children: [\"You scored \", totalCorrect(), \"/\", questionElements.length, \" correct answers\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"play-again-button\",\n          onClick: toStartScreen,\n          children: \"Play Again\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n_s(PlayScreen, \"gWJXvTk86Cf1IQDy7F3uceGT5+4=\");\n\n_c = PlayScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlayScreen\");","map":{"version":3,"names":["React","Question","nanoid","PlayScreen","props","playingGame","toStartScreen","toEndGame","gameQuestionsDirty","allQuestions","setAllQuestions","useState","useEffect","map","question","index","answersArray","incorrect_answers","answer","id","text","selected","correct","push","correct_answer","correctId","length","i","j","Math","floor","random","temp","answers","selectedId","undefined","handleAnswerClick","event","questionId","prevQuestions","newAnswers","target","totalCorrect","correctCount","forEach","questionElements","questionElement"],"sources":["/Users/grantlj/Documents/React/FreeCodeCamp/quiz-site/src/components/PlayScreen.js"],"sourcesContent":["import React from \"react\";\nimport Question from \"./Question\";\nimport { nanoid } from \"nanoid\";\n\nexport default function PlayScreen(props) {\n  const { playingGame, toStartScreen, toEndGame, gameQuestionsDirty } = props;\n\n  const [allQuestions, setAllQuestions] = React.useState([]);\n\n  React.useEffect(() => {\n    setAllQuestions(\n      gameQuestionsDirty.map((question, index) => {\n        let answersArray = question.incorrect_answers.map((answer) => ({\n          id: nanoid(),\n          text: answer,\n          selected: false,\n          correct: false,\n        }));\n        answersArray.push({\n          id: nanoid(),\n          text: question.correct_answer,\n          selected: false,\n          correct: true,\n        });\n        let correctId = answersArray[answersArray.length - 1].id;\n        for (let i = answersArray.length - 1; i > 0; i--) {\n          let j = Math.floor(Math.random() * (i + 1));\n          let temp = answersArray[i];\n          answersArray[i] = answersArray[j];\n          answersArray[j] = temp;\n        }\n        return {\n          id: index,\n          answers: answersArray,\n          question: question.question,\n          selectedId: undefined,\n          correctId: correctId,\n        };\n      })\n    );\n  }, [gameQuestionsDirty]);\n\n  function handleAnswerClick(event, questionId) {\n    setAllQuestions((prevQuestions) =>\n      prevQuestions.map((question) => {\n        if (question.id === questionId) {\n          let newAnswers = question.answers.map((answer) => {\n            if (event.target.id === answer.id) {\n              return {\n                ...answer,\n                selected: !answer.selected,\n              };\n            } else {\n              return {\n                ...answer,\n                selected: false,\n              };\n            }\n          });\n          return {\n            ...question,\n            answers: newAnswers,\n          };\n        } else {\n          return question;\n        }\n      })\n    );\n  }\n\n  function totalCorrect() {\n    let correctCount = 0;\n    allQuestions.forEach((question) => {\n      question.answers.forEach((answer) => {\n        correctCount += answer.correct && answer.selected ? 1 : 0;\n      });\n    });\n    return correctCount;\n  }\n\n  // Generate question elements to display\n  if (allQuestions.length) {\n    const questionElements = allQuestions.map((questionElement) => {\n      return (\n        <Question\n          key={questionElement.id}\n          id={questionElement.id}\n          questionText={questionElement.question}\n          questionAnswers={questionElement.answers}\n          playingGame={playingGame}\n          handleAnswerClick={handleAnswerClick}\n        />\n      );\n    });\n\n    return (\n      <div className=\"play-screen\">\n        <div className=\"question-container\">{questionElements}</div>\n\n        {playingGame && (\n          <button\n            className=\"submit-button\"\n            onClick={() => toEndGame(allQuestions)}\n          >\n            Check Answers\n          </button>\n        )}\n\n        {!playingGame && (\n          <div className=\"play-again-container\">\n            <h2 className=\"score\">\n              You scored {totalCorrect()}/{questionElements.length} correct\n              answers\n            </h2>\n            <button className=\"play-again-button\" onClick={toStartScreen}>\n              Play Again\n            </button>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}