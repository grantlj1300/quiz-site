{"ast":null,"code":"var _jsxFileName = \"/Users/grantlj/Documents/React/FreeCodeCamp/quiz-site/src/components/PlayScreen.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport Question from \"./Question\";\nimport { nanoid } from \"nanoid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PlayScreen(props) {\n  _s();\n\n  const {\n    playingGame,\n    toStartScreen,\n    toEndGame,\n    gameQuestionsDirty\n  } = props;\n  const [allQuestions, setAllQuestions] = React.useState(generateQuestions());\n\n  function generateQuestions() {\n    gameQuestionsDirty.map((question, index) => {\n      let answersArray = question.incorrect_answers.map(answer => ({\n        id: nanoid(),\n        text: answer,\n        selected: false,\n        correct: false\n      }));\n      answersArray.push({\n        id: nanoid(),\n        text: question.correct_answer,\n        selected: false,\n        correct: true\n      });\n\n      for (let i = answersArray.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        let temp = answersArray[i];\n        answersArray[i] = answersArray[j];\n        answersArray[j] = temp;\n      }\n\n      return {\n        id: index,\n        answers: answersArray,\n        question: question.question\n      };\n    });\n  }\n\n  function handleAnswerClick(event) {\n    setAllQuestions(prevQuestions => prevQuestions.map(question => {\n      if (question.id === event.target.id) {\n        return question;\n      } else {\n        return question;\n      }\n    })); //     {\n    //     let newAnsweredId, newCorrectCount, newAnsweredCount\n    //     let updatedAnswers = prevBlock.answers.map(answer => {\n    //         if(event.target.id === answer.id){\n    //             newAnsweredId = answer.selected ? undefined : answer.id\n    //             return {...answer, selected: !answer.selected}\n    //         }\n    //         else {\n    //             return {...answer, selected: false}\n    //         }\n    //     })\n    //     //updateEndGameStats(prevBlock.answeredId, newAnsweredId, prevBlock.correctId)\n    //     return {...prevBlock, answers: updatedAnswers, answeredId: newAnsweredId}\n    // })\n  } // Generate question elements to display\n\n\n  const questionElements = allQuestions.map(questionElement => {\n    return /*#__PURE__*/_jsxDEV(Question, {\n      id: questionElement.id,\n      questionText: questionElement.question,\n      questionAnswers: questionElement.answers,\n      playingGame: playingGame,\n      handleAnswerClick: handleAnswerClick\n    }, questionElement.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 10\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"play-screen\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-container\",\n      children: questionElements\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), playingGame && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"submit-button\",\n      onClick: true ? toEndGame : undefined,\n      children: \"Check Answers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this), !playingGame && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"play-again-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"score\",\n        children: [\"You scored \", 0, \"/\", questionElements.length, \" correct answers\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"play-again-button\",\n        onClick: toStartScreen,\n        children: \"Play Again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 30\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n}\n\n_s(PlayScreen, \"Hj6HjiPnc3S4ZdE7muaoqsRIYAM=\");\n\n_c = PlayScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlayScreen\");","map":{"version":3,"names":["React","Question","nanoid","PlayScreen","props","playingGame","toStartScreen","toEndGame","gameQuestionsDirty","allQuestions","setAllQuestions","useState","generateQuestions","map","question","index","answersArray","incorrect_answers","answer","id","text","selected","correct","push","correct_answer","i","length","j","Math","floor","random","temp","answers","handleAnswerClick","event","prevQuestions","target","questionElements","questionElement","undefined"],"sources":["/Users/grantlj/Documents/React/FreeCodeCamp/quiz-site/src/components/PlayScreen.js"],"sourcesContent":["import React from \"react\"\nimport Question from \"./Question\"\nimport {nanoid} from \"nanoid\"\n\nexport default function PlayScreen(props) {\n\n    const {playingGame, toStartScreen, toEndGame, gameQuestionsDirty} = props\n\n    const [allQuestions, setAllQuestions] = React.useState(generateQuestions())\n\n    function generateQuestions(){\n        gameQuestionsDirty.map((question, index) => {\n            let answersArray = question.incorrect_answers.map(answer => (\n                {\n                    id: nanoid(),\n                    text: answer,\n                    selected: false,\n                    correct: false\n                }\n            ))\n            answersArray.push(\n                {\n                    id: nanoid(),\n                    text: question.correct_answer,\n                    selected: false,\n                    correct: true\n                }\n            )\n            for (let i = answersArray.length - 1; i > 0; i--) {\n                let j = Math.floor(Math.random() * (i + 1));\n                let temp = answersArray[i];\n                answersArray[i] = answersArray[j];\n                answersArray[j] = temp;\n            }\n            return  {\n                id: index,\n                answers: answersArray,\n                question: question.question,\n            }\n        })\n    }\n\n    function handleAnswerClick(event){\n\t\tsetAllQuestions(prevQuestions => prevQuestions.map(question => {\n            if(question.id === event.target.id){\n                return question\n            }\n            else{\n                return question\n            }\n        }))\n            \n        //     {\n        //     let newAnsweredId, newCorrectCount, newAnsweredCount\n        //     let updatedAnswers = prevBlock.answers.map(answer => {\n        //         if(event.target.id === answer.id){\n        //             newAnsweredId = answer.selected ? undefined : answer.id\n        //             return {...answer, selected: !answer.selected}\n        //         }\n        //         else {\n        //             return {...answer, selected: false}\n        //         }\n        //     })\n        //     //updateEndGameStats(prevBlock.answeredId, newAnsweredId, prevBlock.correctId)\n        //     return {...prevBlock, answers: updatedAnswers, answeredId: newAnsweredId}\n\t\t// })\n    }\n\n    // Generate question elements to display\n\tconst questionElements = allQuestions.map(questionElement => {\n\t\treturn <Question \n\t\t\tkey={questionElement.id}\n\t\t\tid={questionElement.id}\n\t\t\tquestionText={questionElement.question}\n\t\t\tquestionAnswers={questionElement.answers}\n\t\t\tplayingGame={playingGame}\n            handleAnswerClick={handleAnswerClick}\n\t\t/>\n\t})\n\n    return (\n        <div className=\"play-screen\">\n            <div className=\"question-container\">\n                {questionElements}\n            </div>\n\n            {playingGame && \n            <button className=\"submit-button\" \n            onClick={true ? toEndGame : undefined}>\n                Check Answers\n            </button>}\n\n            {!playingGame && <div className=\"play-again-container\">\n                <h2 className=\"score\">\n                    You scored {0}/{questionElements.length} correct answers\n                </h2>\n                <button className=\"play-again-button\" onClick={toStartScreen}>\n                    Play Again\n                </button>\n            </div>\n            }\n        </div>\n    )\n} "],"mappings":"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"},"metadata":{},"sourceType":"module"}