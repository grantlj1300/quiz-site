{"ast":null,"code":"var _jsxFileName = \"/Users/grantlj/Documents/React/FreeCodeCamp/quiz-site/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { nanoid } from 'nanoid';\nimport Question from './components/Question';\nimport StartScreen from './components/StartScreen';\nimport PlayScreen from './components/PlayScreen';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  // Grab category: id data from API once\n  const [categories, setCategories] = React.useState([]);\n  React.useEffect(() => {\n    fetch(\"https://opentdb.com/api_category.php\").then(res => res.json()).then(data => setCategories(data.trivia_categories));\n  }, []);\n  const categoryOptions = categories.map(category => /*#__PURE__*/_jsxDEV(\"option\", {\n    value: category.id,\n    children: category.name\n  }, category.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 3\n  }, this)); // Generate form to hold user input\n\n  const [formData, setFormData] = React.useState({\n    numQuestions: \"\",\n    category: 0,\n    difficulty: \"\",\n    type: \"\"\n  });\n\n  function handleFormChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    setFormData(prevFormData => ({ ...prevFormData,\n      [name]: value\n    }));\n  } // Stores API return of question objects\n\n\n  const [gameQuestionsDirty, setGameQuestionsDirty] = React.useState([]); // Game state tracks which screen to render\n\n  const [gameState, setGameState] = React.useState(\"startGame\");\n\n  function generateUrl() {\n    let {\n      numQuestions,\n      category,\n      difficulty,\n      type\n    } = formData;\n    numQuestions = `amount=${numQuestions}`;\n    category = category === 0 ? \"\" : `&category=${category}`;\n    difficulty = difficulty === \"\" ? \"\" : `&difficulty=${difficulty}`;\n    type = type === \"\" ? \"\" : `&type=${type}`;\n    return `https://opentdb.com/api.php?${numQuestions}\n\t\t\t${category}${difficulty}${type}`;\n  } // Grab questions from API and set game state to play\n\n\n  function startGame() {\n    fetch(generateUrl()).then(res => res.json()).then(data => setGameQuestionsDirty(data.results));\n    setGameState(\"playingGame\");\n    setFormData({\n      numQuestions: \"\",\n      category: 0,\n      difficulty: \"\",\n      type: \"\"\n    });\n  } // Set game state to start a new game\n\n\n  function toStartScreen() {\n    setGameQuestionsDirty([]);\n    setGameState(\"startGame\");\n  } // Check if all questions have been answered, end game if so\n\n\n  function toEndGame(questions) {\n    let allAnswered = questions.every(question => question.answers.every(answer => answer.selected === true));\n    console.log(allAnswered);\n    allAnswered && setGameState(\"endGame\");\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-container\",\n    children: [gameState === \"startGame\" && /*#__PURE__*/_jsxDEV(StartScreen, {\n      formData: formData,\n      handleFormChange: handleFormChange,\n      categoryOptions: categoryOptions,\n      startGame: startGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 4\n    }, this), (gameState === \"playingGame\" || gameState === \"endGame\") && /*#__PURE__*/_jsxDEV(PlayScreen, {\n      playingGame: gameState === \"playingGame\" ? true : false,\n      toStartScreen: toStartScreen,\n      toEndGame: toEndGame,\n      gameQuestionsDirty: gameQuestionsDirty\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 3\n  }, this);\n}\n\n_s(App, \"FoaL404h46U/VJaE3bI6gVSz0ow=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","nanoid","Question","StartScreen","PlayScreen","App","categories","setCategories","useState","useEffect","fetch","then","res","json","data","trivia_categories","categoryOptions","map","category","id","name","formData","setFormData","numQuestions","difficulty","type","handleFormChange","event","value","target","prevFormData","gameQuestionsDirty","setGameQuestionsDirty","gameState","setGameState","generateUrl","startGame","results","toStartScreen","toEndGame","questions","allAnswered","every","question","answers","answer","selected","console","log"],"sources":["/Users/grantlj/Documents/React/FreeCodeCamp/quiz-site/src/App.js"],"sourcesContent":["import React from 'react'\nimport {nanoid} from 'nanoid'\nimport Question from './components/Question'\nimport StartScreen from './components/StartScreen'\nimport PlayScreen from './components/PlayScreen'\n\nexport default function App() {\n\t// Grab category: id data from API once\n\tconst [categories, setCategories] = React.useState([])\n\tReact.useEffect(() => {\n\t\tfetch(\"https://opentdb.com/api_category.php\")\n\t\t\t.then(res => res.json())\n\t\t\t.then(data => setCategories(data.trivia_categories))\n\t}, [])\n\n\tconst categoryOptions = categories.map(category => (\n\t\t<option key={category.id} value={category.id}>{category.name}</option>\n\t))\n\n\t// Generate form to hold user input\n\tconst [formData, setFormData] = React.useState(\n\t\t{\n\t\t\tnumQuestions: \"\",\n\t\t\tcategory: 0,\n\t\t\tdifficulty: \"\",\n\t\t\ttype: \"\"\n\t\t}\n\t)\n\n\tfunction handleFormChange(event) {\n\t\tconst {name, value} = event.target\n\t\tsetFormData(prevFormData => (\n\t\t\t{\n\t\t\t\t...prevFormData,\n\t\t\t\t[name]: value\n\t\t\t}\n\t\t))\n\t}\n\n\t// Stores API return of question objects\n\tconst [gameQuestionsDirty, setGameQuestionsDirty] = React.useState([])\n\n\t// Game state tracks which screen to render\n\tconst [gameState, setGameState] = React.useState(\"startGame\")\n\n\tfunction generateUrl() {\n\t\tlet {numQuestions, category, difficulty, type} = formData\n\n\t\tnumQuestions = `amount=${numQuestions}`\n\t\tcategory = category === 0 ? \"\" : `&category=${category}`\n\t\tdifficulty = difficulty === \"\" ? \"\" : `&difficulty=${difficulty}`\n\t\ttype = type === \"\" ? \"\" : `&type=${type}`\n\n\t\treturn `https://opentdb.com/api.php?${numQuestions}\n\t\t\t${category}${difficulty}${type}`\n\t}\n\n\t// Grab questions from API and set game state to play\n\tfunction startGame(){\n\t\tfetch(generateUrl())\n\t\t\t.then(res => res.json())\n\t\t\t.then(data => setGameQuestionsDirty(data.results))\n\n\t\tsetGameState(\"playingGame\")\n\n\t\tsetFormData(\n\t\t\t{\n\t\t\t\tnumQuestions: \"\",\n\t\t\t\tcategory: 0,\n\t\t\t\tdifficulty: \"\",\n\t\t\t\ttype: \"\"\n\t\t\t}\n\t\t)\n\t}\n\n\t// Set game state to start a new game\n\tfunction toStartScreen(){\n\t\tsetGameQuestionsDirty([])\n\t\tsetGameState(\"startGame\")\n\t}\n\n\t// Check if all questions have been answered, end game if so\n\tfunction toEndGame(questions){\n\t\tlet allAnswered = questions.every(question => \n\t\t\tquestion.answers.every(answer => answer.selected === true))\n\t\tconsole.log(allAnswered)\n\t\tallAnswered && setGameState(\"endGame\")\n\t}\n\n\treturn (\n\t\t<div className=\"main-container\">\n\t\t\t{gameState === \"startGame\" && \n\t\t\t<StartScreen \n\t\t\t\tformData={formData}\n\t\t\t\thandleFormChange={handleFormChange}\n\t\t\t\tcategoryOptions={categoryOptions}\n\t\t\t\tstartGame={startGame}\n\t\t\t/>}\n\n\t\t\t{(gameState === \"playingGame\" || gameState === \"endGame\")&& \n\t\t\t<PlayScreen \n\t\t\t\tplayingGame={gameState === \"playingGame\" ? true : false}\n\t\t\t\ttoStartScreen={toStartScreen}\n\t\t\t\ttoEndGame={toEndGame}\n\t\t\t\tgameQuestionsDirty={gameQuestionsDirty}\n\t\t\t/>}\n\t\t</div>\n\t)\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}