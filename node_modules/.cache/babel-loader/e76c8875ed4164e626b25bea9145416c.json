{"ast":null,"code":"var _jsxFileName = \"/Users/grantlj/Documents/React/FreeCodeCamp/quiz-site/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { nanoid } from \"nanoid\";\nimport Question from \"./components/Question\";\nimport StartScreen from \"./components/StartScreen\";\nimport PlayScreen from \"./components/PlayScreen\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  // Grab category: id data from API once\n  const [categories, setCategories] = React.useState([]);\n  React.useEffect(() => {\n    fetch(\"https://opentdb.com/api_category.php\").then(res => res.json()).then(data => setCategories(data.trivia_categories));\n  }, []);\n  const categoryOptions = categories.map(category => /*#__PURE__*/_jsxDEV(\"option\", {\n    value: category.id,\n    children: category.name\n  }, category.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this)); // Generate form to hold user input\n\n  const [formData, setFormData] = React.useState({\n    numQuestions: \"\",\n    category: 0,\n    difficulty: \"\",\n    type: \"\"\n  });\n\n  function handleFormChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    setFormData(prevFormData => ({ ...prevFormData,\n      [name]: value\n    }));\n  } // Stores API return of question objects\n\n\n  const [gameQuestionsDirty, setGameQuestionsDirty] = React.useState([]); // Game state tracks which screen to render\n\n  const [gameState, setGameState] = React.useState(\"startGame\");\n\n  function generateUrl() {\n    let {\n      numQuestions,\n      category,\n      difficulty,\n      type\n    } = formData;\n    numQuestions = `amount=${numQuestions}`;\n    category = category === 0 ? \"\" : `&category=${category}`;\n    difficulty = difficulty === \"\" ? \"\" : `&difficulty=${difficulty}`;\n    type = type === \"\" ? \"\" : `&type=${type}`;\n    return `https://opentdb.com/api.php?${numQuestions}\n\t\t\t${category}${difficulty}${type}`;\n  } // Grab questions from API and set game state to play\n\n\n  function startGame() {\n    fetch(generateUrl()).then(res => res.json()).then(data => setGameQuestionsDirty(data.results));\n    setGameState(\"playingGame\");\n    setFormData({\n      numQuestions: \"\",\n      category: 0,\n      difficulty: \"\",\n      type: \"\"\n    });\n  } // Set game state to start a new game\n\n\n  function toStartScreen() {\n    setGameQuestionsDirty([]);\n    setGameState(\"startGame\");\n  } // Check if all questions have been answered, end game if so\n\n\n  function toEndGame(questions) {\n    let allAnswered = true;\n    questions.forEach(question => {\n      let answered = false;\n      question.answers.forEach(answer => {\n        if (answer.selected) {\n          answered = true;\n        }\n      });\n\n      if (!answered) {\n        allAnswered = false;\n      }\n    });\n\n    if (allAnswered) {\n      setGameState(\"endGame\");\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-container\",\n    children: [gameState === \"startGame\" && /*#__PURE__*/_jsxDEV(StartScreen, {\n      formData: formData,\n      handleFormChange: handleFormChange,\n      categoryOptions: categoryOptions,\n      startGame: startGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this), (gameState === \"playingGame\" || gameState === \"endGame\") && /*#__PURE__*/_jsxDEV(PlayScreen, {\n      playingGame: gameState === \"playingGame\" ? true : false,\n      toStartScreen: toStartScreen,\n      toEndGame: toEndGame,\n      gameQuestionsDirty: gameQuestionsDirty\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"kfi7vxlA2GRt7GqDp5VjLtJLVmA=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","nanoid","Question","StartScreen","PlayScreen","App","categories","setCategories","useState","useEffect","fetch","then","res","json","data","trivia_categories","categoryOptions","map","category","id","name","formData","setFormData","numQuestions","difficulty","type","handleFormChange","event","value","target","prevFormData","gameQuestionsDirty","setGameQuestionsDirty","gameState","setGameState","generateUrl","startGame","results","toStartScreen","toEndGame","questions","allAnswered","forEach","question","answered","answers","answer","selected"],"sources":["/Users/grantlj/Documents/React/FreeCodeCamp/quiz-site/src/App.js"],"sourcesContent":["import React from \"react\";\nimport { nanoid } from \"nanoid\";\nimport Question from \"./components/Question\";\nimport StartScreen from \"./components/StartScreen\";\nimport PlayScreen from \"./components/PlayScreen\";\n\nexport default function App() {\n  // Grab category: id data from API once\n  const [categories, setCategories] = React.useState([]);\n  React.useEffect(() => {\n    fetch(\"https://opentdb.com/api_category.php\")\n      .then((res) => res.json())\n      .then((data) => setCategories(data.trivia_categories));\n  }, []);\n\n  const categoryOptions = categories.map((category) => (\n    <option key={category.id} value={category.id}>\n      {category.name}\n    </option>\n  ));\n\n  // Generate form to hold user input\n  const [formData, setFormData] = React.useState({\n    numQuestions: \"\",\n    category: 0,\n    difficulty: \"\",\n    type: \"\",\n  });\n\n  function handleFormChange(event) {\n    const { name, value } = event.target;\n    setFormData((prevFormData) => ({\n      ...prevFormData,\n      [name]: value,\n    }));\n  }\n\n  // Stores API return of question objects\n  const [gameQuestionsDirty, setGameQuestionsDirty] = React.useState([]);\n\n  // Game state tracks which screen to render\n  const [gameState, setGameState] = React.useState(\"startGame\");\n\n  function generateUrl() {\n    let { numQuestions, category, difficulty, type } = formData;\n\n    numQuestions = `amount=${numQuestions}`;\n    category = category === 0 ? \"\" : `&category=${category}`;\n    difficulty = difficulty === \"\" ? \"\" : `&difficulty=${difficulty}`;\n    type = type === \"\" ? \"\" : `&type=${type}`;\n\n    return `https://opentdb.com/api.php?${numQuestions}\n\t\t\t${category}${difficulty}${type}`;\n  }\n\n  // Grab questions from API and set game state to play\n  function startGame() {\n    fetch(generateUrl())\n      .then((res) => res.json())\n      .then((data) => setGameQuestionsDirty(data.results));\n\n    setGameState(\"playingGame\");\n\n    setFormData({\n      numQuestions: \"\",\n      category: 0,\n      difficulty: \"\",\n      type: \"\",\n    });\n  }\n\n  // Set game state to start a new game\n  function toStartScreen() {\n    setGameQuestionsDirty([]);\n    setGameState(\"startGame\");\n  }\n\n  // Check if all questions have been answered, end game if so\n  function toEndGame(questions) {\n    let allAnswered = true;\n    questions.forEach((question) => {\n      let answered = false;\n      question.answers.forEach((answer) => {\n        if (answer.selected) {\n          answered = true;\n        }\n      });\n      if (!answered) {\n        allAnswered = false;\n      }\n    });\n    if (allAnswered) {\n      setGameState(\"endGame\");\n    }\n  }\n\n  return (\n    <div className=\"main-container\">\n      {gameState === \"startGame\" && (\n        <StartScreen\n          formData={formData}\n          handleFormChange={handleFormChange}\n          categoryOptions={categoryOptions}\n          startGame={startGame}\n        />\n      )}\n\n      {(gameState === \"playingGame\" || gameState === \"endGame\") && (\n        <PlayScreen\n          playingGame={gameState === \"playingGame\" ? true : false}\n          toStartScreen={toStartScreen}\n          toEndGame={toEndGame}\n          gameQuestionsDirty={gameQuestionsDirty}\n        />\n      )}\n    </div>\n  );\n}\n"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;;AAEA,eAAe,SAASC,GAAT,GAAe;EAAA;;EAC5B;EACA,MAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BP,KAAK,CAACQ,QAAN,CAAe,EAAf,CAApC;EACAR,KAAK,CAACS,SAAN,CAAgB,MAAM;IACpBC,KAAK,CAAC,sCAAD,CAAL,CACGC,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESG,IAAD,IAAUP,aAAa,CAACO,IAAI,CAACC,iBAAN,CAF/B;EAGD,CAJD,EAIG,EAJH;EAMA,MAAMC,eAAe,GAAGV,UAAU,CAACW,GAAX,CAAgBC,QAAD,iBACrC;IAA0B,KAAK,EAAEA,QAAQ,CAACC,EAA1C;IAAA,UACGD,QAAQ,CAACE;EADZ,GAAaF,QAAQ,CAACC,EAAtB;IAAA;IAAA;IAAA;EAAA,QADsB,CAAxB,CAT4B,CAe5B;;EACA,MAAM,CAACE,QAAD,EAAWC,WAAX,IAA0BtB,KAAK,CAACQ,QAAN,CAAe;IAC7Ce,YAAY,EAAE,EAD+B;IAE7CL,QAAQ,EAAE,CAFmC;IAG7CM,UAAU,EAAE,EAHiC;IAI7CC,IAAI,EAAE;EAJuC,CAAf,CAAhC;;EAOA,SAASC,gBAAT,CAA0BC,KAA1B,EAAiC;IAC/B,MAAM;MAAEP,IAAF;MAAQQ;IAAR,IAAkBD,KAAK,CAACE,MAA9B;IACAP,WAAW,CAAEQ,YAAD,KAAmB,EAC7B,GAAGA,YAD0B;MAE7B,CAACV,IAAD,GAAQQ;IAFqB,CAAnB,CAAD,CAAX;EAID,CA7B2B,CA+B5B;;;EACA,MAAM,CAACG,kBAAD,EAAqBC,qBAArB,IAA8ChC,KAAK,CAACQ,QAAN,CAAe,EAAf,CAApD,CAhC4B,CAkC5B;;EACA,MAAM,CAACyB,SAAD,EAAYC,YAAZ,IAA4BlC,KAAK,CAACQ,QAAN,CAAe,WAAf,CAAlC;;EAEA,SAAS2B,WAAT,GAAuB;IACrB,IAAI;MAAEZ,YAAF;MAAgBL,QAAhB;MAA0BM,UAA1B;MAAsCC;IAAtC,IAA+CJ,QAAnD;IAEAE,YAAY,GAAI,UAASA,YAAa,EAAtC;IACAL,QAAQ,GAAGA,QAAQ,KAAK,CAAb,GAAiB,EAAjB,GAAuB,aAAYA,QAAS,EAAvD;IACAM,UAAU,GAAGA,UAAU,KAAK,EAAf,GAAoB,EAApB,GAA0B,eAAcA,UAAW,EAAhE;IACAC,IAAI,GAAGA,IAAI,KAAK,EAAT,GAAc,EAAd,GAAoB,SAAQA,IAAK,EAAxC;IAEA,OAAQ,+BAA8BF,YAAa;AACvD,KAAKL,QAAS,GAAEM,UAAW,GAAEC,IAAK,EAD9B;EAED,CA/C2B,CAiD5B;;;EACA,SAASW,SAAT,GAAqB;IACnB1B,KAAK,CAACyB,WAAW,EAAZ,CAAL,CACGxB,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESG,IAAD,IAAUkB,qBAAqB,CAAClB,IAAI,CAACuB,OAAN,CAFvC;IAIAH,YAAY,CAAC,aAAD,CAAZ;IAEAZ,WAAW,CAAC;MACVC,YAAY,EAAE,EADJ;MAEVL,QAAQ,EAAE,CAFA;MAGVM,UAAU,EAAE,EAHF;MAIVC,IAAI,EAAE;IAJI,CAAD,CAAX;EAMD,CA/D2B,CAiE5B;;;EACA,SAASa,aAAT,GAAyB;IACvBN,qBAAqB,CAAC,EAAD,CAArB;IACAE,YAAY,CAAC,WAAD,CAAZ;EACD,CArE2B,CAuE5B;;;EACA,SAASK,SAAT,CAAmBC,SAAnB,EAA8B;IAC5B,IAAIC,WAAW,GAAG,IAAlB;IACAD,SAAS,CAACE,OAAV,CAAmBC,QAAD,IAAc;MAC9B,IAAIC,QAAQ,GAAG,KAAf;MACAD,QAAQ,CAACE,OAAT,CAAiBH,OAAjB,CAA0BI,MAAD,IAAY;QACnC,IAAIA,MAAM,CAACC,QAAX,EAAqB;UACnBH,QAAQ,GAAG,IAAX;QACD;MACF,CAJD;;MAKA,IAAI,CAACA,QAAL,EAAe;QACbH,WAAW,GAAG,KAAd;MACD;IACF,CAVD;;IAWA,IAAIA,WAAJ,EAAiB;MACfP,YAAY,CAAC,SAAD,CAAZ;IACD;EACF;;EAED,oBACE;IAAK,SAAS,EAAC,gBAAf;IAAA,WACGD,SAAS,KAAK,WAAd,iBACC,QAAC,WAAD;MACE,QAAQ,EAAEZ,QADZ;MAEE,gBAAgB,EAAEK,gBAFpB;MAGE,eAAe,EAAEV,eAHnB;MAIE,SAAS,EAAEoB;IAJb;MAAA;MAAA;MAAA;IAAA,QAFJ,EAUG,CAACH,SAAS,KAAK,aAAd,IAA+BA,SAAS,KAAK,SAA9C,kBACC,QAAC,UAAD;MACE,WAAW,EAAEA,SAAS,KAAK,aAAd,GAA8B,IAA9B,GAAqC,KADpD;MAEE,aAAa,EAAEK,aAFjB;MAGE,SAAS,EAAEC,SAHb;MAIE,kBAAkB,EAAER;IAJtB;MAAA;MAAA;MAAA;IAAA,QAXJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAqBD;;GA/GuB1B,G;;KAAAA,G"},"metadata":{},"sourceType":"module"}