{"ast":null,"code":"var _jsxFileName = \"/Users/grantlj/Documents/React/FreeCodeCamp/quiz-site/src/components/PlayScreen.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport Question from \"./Question\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PlayScreen(props) {\n  _s();\n\n  const {\n    playingGame,\n    toStartScreen,\n    toEndGame,\n    gameQuestionsDirty\n  } = props; // End Game Stats keep track of total correct answers and total selected answers\n\n  const [allQuestionStats, setAllQuestionStats] = React.useState();\n  React.useEffect(() => {\n    gameQuestionsDirty.map(index => ({\n      key: i,\n      id: i,\n      correct: false,\n      answered: false\n    }));\n  }, []);\n\n  function checkEndStats() {\n    allQuestionStats.forEach(question => {\n      if (!question.answered) {\n        return false;\n      }\n    });\n    return true;\n  }\n\n  function checkTotalCorrect() {\n    let total = 0;\n    allQuestionStats.forEach(question => {\n      total = question.correct ? total + 1 : total;\n    });\n    return total;\n  } //React.useEffect(()=>console.log(allQuestionStats),[allQuestionStats])\n  // Update total correct and total selected based on user input\n\n\n  function updateEndGameStats(questionId, correctId, answeredId) {\n    setAllQuestionStats(prevStats => prevStats.map(question => {\n      if (question.id === questionId) {\n        return { ...question,\n          correct: answeredId === correctId && !question.answered ? true : false,\n          answered: !question.answered\n        };\n      } else {\n        return question;\n      }\n    })); // setEndGameStats(prevStats => (\n    //     {\n    //         totalCorrect: prevStats.totalCorrect + correctCount,\n    //         totalAnswered: prevStats.totalAnswered + answeredCount\n    //     }\n    // ))\n  } // Generate question elements to display\n\n\n  const questionElements = gameQuestionsDirty.map((questionElement, index) => {\n    return /*#__PURE__*/_jsxDEV(Question, {\n      id: index,\n      questionText: questionElement.question,\n      questionAnswers: [...questionElement.incorrect_answers, questionElement.correct_answer],\n      playingGame: playingGame,\n      updateEndGameStats: updateEndGameStats\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 10\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"play-screen\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-container\",\n      children: questionElements\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), playingGame && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"submit-button\",\n      onClick: checkEndStats() ? toEndGame : undefined,\n      children: \"Check Answers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), !playingGame && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"play-again-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"score\",\n        children: [\"You scored \", checkTotalCorrect(), \"/\", questionElements.length, \" correct answers\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"play-again-button\",\n        onClick: toStartScreen,\n        children: \"Play Again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 30\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n}\n\n_s(PlayScreen, \"b6xR4oO+2X+6Xs1H0HXCG5YLXvk=\");\n\n_c = PlayScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlayScreen\");","map":{"version":3,"names":["React","Question","PlayScreen","props","playingGame","toStartScreen","toEndGame","gameQuestionsDirty","allQuestionStats","setAllQuestionStats","useState","useEffect","map","index","key","i","id","correct","answered","checkEndStats","forEach","question","checkTotalCorrect","total","updateEndGameStats","questionId","correctId","answeredId","prevStats","questionElements","questionElement","incorrect_answers","correct_answer","undefined","length"],"sources":["/Users/grantlj/Documents/React/FreeCodeCamp/quiz-site/src/components/PlayScreen.js"],"sourcesContent":["import React from \"react\"\nimport Question from \"./Question\"\n\nexport default function PlayScreen(props) {\n\n    const {playingGame, toStartScreen, toEndGame, gameQuestionsDirty} = props\n\n    // End Game Stats keep track of total correct answers and total selected answers\n    const [allQuestionStats, setAllQuestionStats] = React.useState()\n\n    React.useEffect(() => {gameQuestionsDirty.map((index) => (\n        {\n            key: i,\n            id: i,\n            correct: false,\n            answered: false\n        }\n    ))}, [])\n\n    function checkEndStats(){\n        allQuestionStats.forEach(question => {\n            if(!question.answered){ return false }\n        })\n        return true\n    }\n\n    function checkTotalCorrect(){\n        let total = 0\n        allQuestionStats.forEach(question => {\n            total = question.correct ? total + 1 : total\n        })\n        return total\n    }\n\n    //React.useEffect(()=>console.log(allQuestionStats),[allQuestionStats])\n\n    // Update total correct and total selected based on user input\n    function updateEndGameStats(questionId, correctId, answeredId){\n        setAllQuestionStats(prevStats => prevStats.map(question => {\n            if(question.id === questionId){\n                return {\n                    ...question,\n                    correct: (answeredId === correctId) && !question.answered ? true : false,\n                    answered: !question.answered\n                }\n            }\n            else{\n                return question\n            }\n        }))\n        // setEndGameStats(prevStats => (\n        //     {\n        //         totalCorrect: prevStats.totalCorrect + correctCount,\n        //         totalAnswered: prevStats.totalAnswered + answeredCount\n        //     }\n        // ))\n    }\n\n    // Generate question elements to display\n\tconst questionElements = gameQuestionsDirty.map((questionElement, index) => {\n\t\treturn <Question \n\t\t\tkey={index}\n\t\t\tid={index}\n\t\t\tquestionText={questionElement.question}\n\t\t\tquestionAnswers={[...questionElement.incorrect_answers, questionElement.correct_answer]}\n\t\t\tplayingGame={playingGame}\n            updateEndGameStats={updateEndGameStats}\n\t\t/>\n\t})\n\n    return (\n        <div className=\"play-screen\">\n            <div className=\"question-container\">\n                {questionElements}\n            </div>\n\n            {playingGame && \n            <button className=\"submit-button\" \n            onClick={checkEndStats() ? toEndGame : undefined}>\n                Check Answers\n            </button>}\n\n            {!playingGame && <div className=\"play-again-container\">\n                <h2 className=\"score\">\n                    You scored {checkTotalCorrect()}/{questionElements.length} correct answers\n                </h2>\n                <button className=\"play-again-button\" onClick={toStartScreen}>\n                    Play Again\n                </button>\n            </div>\n            }\n        </div>\n    )\n} "],"mappings":"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"},"metadata":{},"sourceType":"module"}