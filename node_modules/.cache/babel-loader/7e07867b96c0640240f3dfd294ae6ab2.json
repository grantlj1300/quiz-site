{"ast":null,"code":"var _jsxFileName = \"/Users/grantlj/Documents/React/FreeCodeCamp/quiz-site/src/components/PlayScreen.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport Question from \"./Question\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PlayScreen(props) {\n  _s();\n\n  const {\n    playingGame,\n    toStartScreen,\n    toEndGame,\n    gameQuestionsDirty\n  } = props; // End Game Stats keep track of total correct answers and total selected answers\n\n  const [endGameStats, setEndGameStats] = React.useState({\n    totalCorrect: 0,\n    totalAnswered: 0\n  }); // Update total correct and total selected based on user input\n\n  function updateEndGameStats(correctCount, answeredCount) {\n    setEndGameStats(prevStats => ({\n      totalCorrect: prevStats.totalCorrect + correctCount,\n      totalAnswered: prevStats.totalAnswered + answeredCount\n    }));\n    console.log(endGameStats.totalAnswered);\n  } // Generate question elements to display\n\n\n  const questionElements = gameQuestionsDirty.map((questionElement, index) => {\n    return /*#__PURE__*/_jsxDEV(Question, {\n      id: index,\n      questionText: questionElement.question,\n      questionAnswers: [...questionElement.incorrect_answers, questionElement.correct_answer],\n      playingGame: playingGame,\n      updateEndGameStats: updateEndGameStats\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 10\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"play-screen\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-container\",\n      children: questionElements\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), playingGame && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"submit-button\",\n      onClick: endGameStats.totalAnswered === questionElements.length ? toEndGame : undefined,\n      children: \"Check Answers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), !playingGame && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"play-again-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"score\",\n        children: [\"You scored \", endGameStats.totalCorrect, \"/\", questionElements.length, \" correct answers\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"play-again-button\",\n        onClick: toStartScreen,\n        children: \"Play Again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 30\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n}\n\n_s(PlayScreen, \"LxVv6yr+WGfq5qhzDGYoXz3TTeQ=\");\n\n_c = PlayScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlayScreen\");","map":{"version":3,"names":["React","Question","PlayScreen","props","playingGame","toStartScreen","toEndGame","gameQuestionsDirty","endGameStats","setEndGameStats","useState","totalCorrect","totalAnswered","updateEndGameStats","correctCount","answeredCount","prevStats","console","log","questionElements","map","questionElement","index","question","incorrect_answers","correct_answer","length","undefined"],"sources":["/Users/grantlj/Documents/React/FreeCodeCamp/quiz-site/src/components/PlayScreen.js"],"sourcesContent":["import React from \"react\"\nimport Question from \"./Question\"\n\nexport default function PlayScreen(props) {\n\n    const {playingGame, toStartScreen, toEndGame, gameQuestionsDirty} = props\n\n    // End Game Stats keep track of total correct answers and total selected answers\n    const [endGameStats, setEndGameStats] = React.useState(\n        {\n            totalCorrect: 0,\n            totalAnswered: 0\n        }\n    )\n\n    // Update total correct and total selected based on user input\n    function updateEndGameStats(correctCount, answeredCount){\n        setEndGameStats(prevStats => (\n            {\n                totalCorrect: prevStats.totalCorrect + correctCount,\n                totalAnswered: prevStats.totalAnswered + answeredCount\n            }\n        ))\n        console.log(endGameStats.totalAnswered)\n    }\n\n    // Generate question elements to display\n\tconst questionElements = gameQuestionsDirty.map((questionElement, index) => {\n\t\treturn <Question \n\t\t\tkey={index}\n\t\t\tid={index}\n\t\t\tquestionText={questionElement.question}\n\t\t\tquestionAnswers={[...questionElement.incorrect_answers, questionElement.correct_answer]}\n\t\t\tplayingGame={playingGame}\n            updateEndGameStats={updateEndGameStats}\n\t\t/>\n\t})\n\n    return (\n        <div className=\"play-screen\">\n            <div className=\"question-container\">\n                {questionElements}\n            </div>\n\n            {playingGame && \n            <button className=\"submit-button\" \n            onClick={endGameStats.totalAnswered === questionElements.length ? toEndGame : undefined}>\n                Check Answers\n            </button>}\n\n            {!playingGame && <div className=\"play-again-container\">\n                <h2 className=\"score\">\n                    You scored {endGameStats.totalCorrect}/{questionElements.length} correct answers\n                </h2>\n                <button className=\"play-again-button\" onClick={toStartScreen}>\n                    Play Again\n                </button>\n            </div>\n            }\n        </div>\n    )\n} "],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,eAAe,SAASC,UAAT,CAAoBC,KAApB,EAA2B;EAAA;;EAEtC,MAAM;IAACC,WAAD;IAAcC,aAAd;IAA6BC,SAA7B;IAAwCC;EAAxC,IAA8DJ,KAApE,CAFsC,CAItC;;EACA,MAAM,CAACK,YAAD,EAAeC,eAAf,IAAkCT,KAAK,CAACU,QAAN,CACpC;IACIC,YAAY,EAAE,CADlB;IAEIC,aAAa,EAAE;EAFnB,CADoC,CAAxC,CALsC,CAYtC;;EACA,SAASC,kBAAT,CAA4BC,YAA5B,EAA0CC,aAA1C,EAAwD;IACpDN,eAAe,CAACO,SAAS,KACrB;MACIL,YAAY,EAAEK,SAAS,CAACL,YAAV,GAAyBG,YAD3C;MAEIF,aAAa,EAAEI,SAAS,CAACJ,aAAV,GAA0BG;IAF7C,CADqB,CAAV,CAAf;IAMAE,OAAO,CAACC,GAAR,CAAYV,YAAY,CAACI,aAAzB;EACH,CArBqC,CAuBtC;;;EACH,MAAMO,gBAAgB,GAAGZ,kBAAkB,CAACa,GAAnB,CAAuB,CAACC,eAAD,EAAkBC,KAAlB,KAA4B;IAC3E,oBAAO,QAAC,QAAD;MAEN,EAAE,EAAEA,KAFE;MAGN,YAAY,EAAED,eAAe,CAACE,QAHxB;MAIN,eAAe,EAAE,CAAC,GAAGF,eAAe,CAACG,iBAApB,EAAuCH,eAAe,CAACI,cAAvD,CAJX;MAKN,WAAW,EAAErB,WALP;MAMG,kBAAkB,EAAES;IANvB,GACDS,KADC;MAAA;MAAA;MAAA;IAAA,QAAP;EAQA,CATwB,CAAzB;EAWG,oBACI;IAAK,SAAS,EAAC,aAAf;IAAA,wBACI;MAAK,SAAS,EAAC,oBAAf;MAAA,UACKH;IADL;MAAA;MAAA;MAAA;IAAA,QADJ,EAKKf,WAAW,iBACZ;MAAQ,SAAS,EAAC,eAAlB;MACA,OAAO,EAAEI,YAAY,CAACI,aAAb,KAA+BO,gBAAgB,CAACO,MAAhD,GAAyDpB,SAAzD,GAAqEqB,SAD9E;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QANJ,EAWK,CAACvB,WAAD,iBAAgB;MAAK,SAAS,EAAC,sBAAf;MAAA,wBACb;QAAI,SAAS,EAAC,OAAd;QAAA,0BACgBI,YAAY,CAACG,YAD7B,OAC4CQ,gBAAgB,CAACO,MAD7D;MAAA;QAAA;QAAA;QAAA;MAAA,QADa,eAIb;QAAQ,SAAS,EAAC,mBAAlB;QAAsC,OAAO,EAAErB,aAA/C;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAJa;IAAA;MAAA;MAAA;MAAA;IAAA,QAXrB;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAuBH;;GA1DuBH,U;;KAAAA,U"},"metadata":{},"sourceType":"module"}