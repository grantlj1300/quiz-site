{"ast":null,"code":"var _jsxFileName = \"/Users/grantlj/Documents/React/FreeCodeCamp/quiz-site/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { nanoid } from 'nanoid';\nimport Question from './components/Question';\nimport StartScreen from './components/StartScreen';\nimport PlayScreen from './components/PlayScreen';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  // Grab category: id data from API once\n  const [categories, setCategories] = React.useState([]);\n  React.useEffect(() => {\n    fetch(\"https://opentdb.com/api_category.php\").then(res => res.json()).then(data => setCategories(data.trivia_categories));\n  }, []); // Game state tracks which screen to render\n\n  const [playingGame, setPlayingGame] = React.useState(false);\n\n  function startGame() {\n    let url;\n    let {\n      numQuestions,\n      category,\n      difficulty,\n      type\n    } = formData;\n    numQuestions = `amount=${numQuestions}`;\n    category = category === 0 ? \"\" : `&category=${category}`;\n    difficulty = difficulty === \"\" ? \"\" : `&difficulty=${difficulty}`;\n    type = type === \"\" ? \"\" : `&type=${type}`;\n    url = `https://opentdb.com/api.php?${numQuestions}\n\t\t\t${category}${difficulty}${type}`;\n    fetch(url).then(res => res.json()).then(data => generateNewQuestions(data.results));\n    setPlayingGame(true);\n    setFormData({\n      numQuestions: \"\",\n      category: 0,\n      difficulty: \"\",\n      type: \"\"\n    });\n  }\n\n  function toStartScreen() {\n    setPlayingGame(false);\n  } // React.useEffect(() => {\n  // \tconst url = `https://opentdb.com/api.php?\n  // \t\t\t\t\tamount=${formData.numQuestions}\n  // \t\t\t\t\t${\"&category=\"}`\n  // \tfetch(\"https://opentdb.com/api.php?amount=3\")\n  // \t\t.then(res => res.json())\n  // \t\t.then(data => generateNewQuestions(data.results))\n  // }, [])\n\n\n  function generateNewQuestions(questionsArray) {\n    console.log(questionsArray);\n    setAllQuestions(questionsArray);\n  }\n\n  const [allQuestions, setAllQuestions] = React.useState([]);\n  const questionElements = allQuestions.map(questionElement => /*#__PURE__*/_jsxDEV(Question, {\n    question: questionElement.question,\n    answers: [...questionElement.incorrect_answers, questionElement.correct_answer],\n    correct_answer: questionElement.correct_answer,\n    selected: false\n  }, nanoid(), false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 3\n  }, this));\n  const categoryOptions = categories.map(category => /*#__PURE__*/_jsxDEV(\"option\", {\n    value: category.id,\n    children: category.name\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 3\n  }, this));\n  const [formData, setFormData] = React.useState({\n    numQuestions: \"\",\n    category: 0,\n    difficulty: \"\",\n    type: \"\"\n  });\n\n  function handleFormChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    setFormData(prevFormData => {\n      return { ...prevFormData,\n        [name]: value\n      };\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-container\",\n    children: [!playingGame && /*#__PURE__*/_jsxDEV(StartScreen, {\n      formData: formData,\n      handleFormChange: handleFormChange,\n      categoryOptions: categoryOptions,\n      startGame: startGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 4\n    }, this), playingGame && /*#__PURE__*/_jsxDEV(PlayScreen, {\n      questionElements: questionElements,\n      toStartScreen: toStartScreen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 3\n  }, this);\n}\n\n_s(App, \"Cxyl5GrmLUXlJwj01AhyoATQFQ4=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","nanoid","Question","StartScreen","PlayScreen","App","categories","setCategories","useState","useEffect","fetch","then","res","json","data","trivia_categories","playingGame","setPlayingGame","startGame","url","numQuestions","category","difficulty","type","formData","generateNewQuestions","results","setFormData","toStartScreen","questionsArray","console","log","setAllQuestions","allQuestions","questionElements","map","questionElement","question","incorrect_answers","correct_answer","categoryOptions","id","name","handleFormChange","event","value","target","prevFormData"],"sources":["/Users/grantlj/Documents/React/FreeCodeCamp/quiz-site/src/App.js"],"sourcesContent":["import React from 'react'\nimport {nanoid} from 'nanoid'\nimport Question from './components/Question'\nimport StartScreen from './components/StartScreen'\nimport PlayScreen from './components/PlayScreen'\n\nexport default function App() {\n\n\t// Grab category: id data from API once\n\tconst [categories, setCategories] = React.useState([])\n\tReact.useEffect(() => {\n\t\tfetch(\"https://opentdb.com/api_category.php\")\n\t\t\t.then(res => res.json())\n\t\t\t.then(data => setCategories(data.trivia_categories))\n\t}, [])\n\n\t// Game state tracks which screen to render\n\tconst [playingGame, setPlayingGame] = React.useState(false)\n\n\tfunction startGame(){\n\t\tlet url\n\t\tlet {numQuestions, category, difficulty, type} = formData\n\n\t\tnumQuestions = `amount=${numQuestions}`\n\t\tcategory = category === 0 ? \"\" : `&category=${category}`\n\t\tdifficulty = difficulty === \"\" ? \"\" : `&difficulty=${difficulty}`\n\t\ttype = type === \"\" ? \"\" : `&type=${type}`\n\n\t\turl = `https://opentdb.com/api.php?${numQuestions}\n\t\t\t${category}${difficulty}${type}`\n\n\t\tfetch(url)\n\t\t\t.then(res => res.json())\n\t\t\t.then(data => generateNewQuestions(data.results))\n\n\t\tsetPlayingGame(true)\n\n\t\tsetFormData(\n\t\t\t{\n\t\t\t\tnumQuestions: \"\",\n\t\t\t\tcategory: 0,\n\t\t\t\tdifficulty: \"\",\n\t\t\t\ttype: \"\"\n\t\t\t}\n\t\t)\n\t}\n\n\tfunction toStartScreen(){\n\t\tsetPlayingGame(false)\n\t}\n\n\t// React.useEffect(() => {\n\n\t// \tconst url = `https://opentdb.com/api.php?\n\t// \t\t\t\t\tamount=${formData.numQuestions}\n\t// \t\t\t\t\t${\"&category=\"}`\n\t// \tfetch(\"https://opentdb.com/api.php?amount=3\")\n\t// \t\t.then(res => res.json())\n\t// \t\t.then(data => generateNewQuestions(data.results))\n\t// }, [])\n\n\tfunction generateNewQuestions(questionsArray){\n\t\tconsole.log(questionsArray)\n\t\tsetAllQuestions(questionsArray)\n\t}\n\n\tconst [allQuestions, setAllQuestions] = React.useState([])\n\n\tconst questionElements = allQuestions.map(questionElement => (\n\t\t<Question \n\t\t\tkey={nanoid()}\n\t\t\tquestion={questionElement.question}\n\t\t\tanswers={[...questionElement.incorrect_answers, questionElement.correct_answer]}\n\t\t\tcorrect_answer={questionElement.correct_answer}\n\t\t\tselected={false}\n\t\t/>\n\t))\n\n\tconst categoryOptions = categories.map(category => (\n\t\t<option value={category.id}>{category.name}</option>\n\t))\n\n\tconst [formData, setFormData] = React.useState(\n\t\t{\n\t\t\tnumQuestions: \"\",\n\t\t\tcategory: 0,\n\t\t\tdifficulty: \"\",\n\t\t\ttype: \"\"\n\t\t}\n\t)\n\n\tfunction handleFormChange(event) {\n\t\tconst {name, value} = event.target\n\t\tsetFormData(prevFormData => {\n\t\t\treturn {\n\t\t\t\t...prevFormData,\n\t\t\t\t[name]: value\n\t\t\t}\n\t\t})\n\t}\n\n\treturn (\n\t\t<div className=\"main-container\">\n\t\t\t{\n\t\t\t!playingGame && \n\t\t\t<StartScreen \n\t\t\t\tformData={formData}\n\t\t\t\thandleFormChange={handleFormChange}\n\t\t\t\tcategoryOptions={categoryOptions}\n\t\t\t\tstartGame={startGame}\n\t\t\t/>\n\t\t\t}\n\t\t\t{\n\t\t\tplayingGame && \n\t\t\t<PlayScreen \n\t\t\t\tquestionElements={questionElements}\n\t\t\t\ttoStartScreen={toStartScreen}\n\t\t\t/>\n\t\t\t}\n\t\t</div>\n\t)\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}