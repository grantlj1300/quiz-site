{"ast":null,"code":"var _jsxFileName = \"/Users/grantlj/Documents/React/FreeCodeCamp/quiz-site/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { nanoid } from 'nanoid';\nimport Question from './components/Question';\nimport StartScreen from './components/StartScreen';\nimport PlayScreen from './components/PlayScreen';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  // Grab category: id data from API once\n  const [categories, setCategories] = React.useState([]);\n  React.useEffect(() => {\n    fetch(\"https://opentdb.com/api_category.php\").then(res => res.json()).then(data => setCategories(data.trivia_categories));\n  }, []);\n  const categoryOptions = categories.map(category => /*#__PURE__*/_jsxDEV(\"option\", {\n    value: category.id,\n    children: category.name\n  }, category.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 3\n  }, this)); // Generate form to hold user input\n\n  const [formData, setFormData] = React.useState({\n    numQuestions: \"\",\n    category: 0,\n    difficulty: \"\",\n    type: \"\"\n  });\n\n  function handleFormChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    setFormData(prevFormData => ({ ...prevFormData,\n      [name]: value\n    }));\n  } // Game state tracks which screen to render\n\n\n  const [gameState, setGameState] = React.useState(\"startGame\");\n\n  function generateUrl() {\n    let {\n      numQuestions,\n      category,\n      difficulty,\n      type\n    } = formData;\n    numQuestions = `amount=${numQuestions}`;\n    category = category === 0 ? \"\" : `&category=${category}`;\n    difficulty = difficulty === \"\" ? \"\" : `&difficulty=${difficulty}`;\n    type = type === \"\" ? \"\" : `&type=${type}`;\n    return `https://opentdb.com/api.php?${numQuestions}\n\t\t\t${category}${difficulty}${type}`;\n  }\n\n  const [gameQuestionsDirty, setGameQuestionsDirty] = React.useState();\n\n  function startGame() {\n    fetch(generateUrl()).then(res => res.json()).then(data => setGameQuestionsDirty(data.results));\n    setGameState(\"playingGame\");\n    setFormData({\n      numQuestions: \"\",\n      category: 0,\n      difficulty: \"\",\n      type: \"\"\n    });\n  }\n\n  function toStartScreen() {\n    setAllQuestions([]);\n    setGameState(\"startGame\");\n  }\n\n  const [totalCorrect, setTotalCorrect] = React.useState(0);\n\n  function toEndGame() {\n    let correctAnswers = 0,\n        answered = 0;\n\n    for (let i = 0; i < allQuestions.length; i++) {\n      let questionAnswered = false;\n\n      for (let j = 0; j < allQuestions[i].answers.length; j++) {\n        if (allQuestions[i].answers[j].correct && allQuestions[i].answers[j].selected) {\n          correctAnswers++;\n          questionAnswered = true;\n        } else if (allQuestions[i].answers[j].selected) {\n          questionAnswered = true;\n        }\n      }\n\n      if (questionAnswered) {\n        answered++;\n      } else {\n        return;\n      }\n    }\n\n    setTotalCorrect(correctAnswers);\n    setGameState(\"endGame\");\n  }\n\n  function handleAnswerClick(event, questionIndex) {\n    setAllQuestions(prevQuestions => prevQuestions.map(question => {\n      if (question.id === questionIndex) {\n        let updatedAnswers = question.answers.map(answer => event.target.id === answer.id ? { ...answer,\n          selected: !answer.selected\n        } : { ...answer,\n          selected: false\n        });\n        return { ...question,\n          answers: updatedAnswers\n        };\n      } else {\n        return question;\n      }\n    }));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-container\",\n    children: [gameState === \"startGame\" && /*#__PURE__*/_jsxDEV(StartScreen, {\n      formData: formData,\n      handleFormChange: handleFormChange,\n      categoryOptions: categoryOptions,\n      startGame: startGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 4\n    }, this), (gameState === \"playingGame\" || gameState === \"endGame\") && /*#__PURE__*/_jsxDEV(PlayScreen, {\n      playingGame: gameState === \"playingGame\" ? true : false,\n      toStartScreen: toStartScreen,\n      toEndGame: toEndGame,\n      totalCorrect: totalCorrect,\n      gameQuestionsDirty: gameQuestionsDirty\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 3\n  }, this);\n}\n\n_s(App, \"oHm/+bwxPgky9TxWaVd6IP8/NHw=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","nanoid","Question","StartScreen","PlayScreen","App","categories","setCategories","useState","useEffect","fetch","then","res","json","data","trivia_categories","categoryOptions","map","category","id","name","formData","setFormData","numQuestions","difficulty","type","handleFormChange","event","value","target","prevFormData","gameState","setGameState","generateUrl","gameQuestionsDirty","setGameQuestionsDirty","startGame","results","toStartScreen","setAllQuestions","totalCorrect","setTotalCorrect","toEndGame","correctAnswers","answered","i","allQuestions","length","questionAnswered","j","answers","correct","selected","handleAnswerClick","questionIndex","prevQuestions","question","updatedAnswers","answer"],"sources":["/Users/grantlj/Documents/React/FreeCodeCamp/quiz-site/src/App.js"],"sourcesContent":["import React from 'react'\nimport {nanoid} from 'nanoid'\nimport Question from './components/Question'\nimport StartScreen from './components/StartScreen'\nimport PlayScreen from './components/PlayScreen'\n\nexport default function App() {\n\n\t// Grab category: id data from API once\n\tconst [categories, setCategories] = React.useState([])\n\tReact.useEffect(() => {\n\t\tfetch(\"https://opentdb.com/api_category.php\")\n\t\t\t.then(res => res.json())\n\t\t\t.then(data => setCategories(data.trivia_categories))\n\t}, [])\n\n\tconst categoryOptions = categories.map(category => (\n\t\t<option \n\t\t\tkey={category.id}\n\t\t\tvalue={category.id}\n\t\t>{category.name}</option>\n\t))\n\n\t// Generate form to hold user input\n\tconst [formData, setFormData] = React.useState(\n\t\t{\n\t\t\tnumQuestions: \"\",\n\t\t\tcategory: 0,\n\t\t\tdifficulty: \"\",\n\t\t\ttype: \"\"\n\t\t}\n\t)\n\n\tfunction handleFormChange(event) {\n\t\tconst {name, value} = event.target\n\t\tsetFormData(prevFormData => (\n\t\t\t{\n\t\t\t\t...prevFormData,\n\t\t\t\t[name]: value\n\t\t\t}\n\t\t))\n\t}\n\n\t// Game state tracks which screen to render\n\tconst [gameState, setGameState] = React.useState(\"startGame\")\n\n\tfunction generateUrl() {\n\t\tlet {numQuestions, category, difficulty, type} = formData\n\n\t\tnumQuestions = `amount=${numQuestions}`\n\t\tcategory = category === 0 ? \"\" : `&category=${category}`\n\t\tdifficulty = difficulty === \"\" ? \"\" : `&difficulty=${difficulty}`\n\t\ttype = type === \"\" ? \"\" : `&type=${type}`\n\n\t\treturn `https://opentdb.com/api.php?${numQuestions}\n\t\t\t${category}${difficulty}${type}`\n\t}\n\n\tconst [gameQuestionsDirty, setGameQuestionsDirty] = React.useState()\n\n\tfunction startGame(){\n\t\tfetch(generateUrl())\n\t\t\t.then(res => res.json())\n\t\t\t.then(data => setGameQuestionsDirty(data.results))\n\n\t\tsetGameState(\"playingGame\")\n\n\t\tsetFormData(\n\t\t\t{\n\t\t\t\tnumQuestions: \"\",\n\t\t\t\tcategory: 0,\n\t\t\t\tdifficulty: \"\",\n\t\t\t\ttype: \"\"\n\t\t\t}\n\t\t)\n\t}\n\n\tfunction toStartScreen(){\n\t\tsetAllQuestions([])\n\t\tsetGameState(\"startGame\")\n\t}\n\n\tconst [totalCorrect, setTotalCorrect] = React.useState(0)\n\n\tfunction toEndGame(){\n\t\tlet correctAnswers = 0, answered = 0\n\t\tfor (let i = 0; i < allQuestions.length; i++) {\n\t\t\tlet questionAnswered = false\n\t\t\tfor(let j = 0; j < allQuestions[i].answers.length; j++){\n\t\t\t\tif(allQuestions[i].answers[j].correct && allQuestions[i].answers[j].selected){\n\t\t\t\t\tcorrectAnswers++\n\t\t\t\t\tquestionAnswered = true\n\t\t\t\t}\n\t\t\t\telse if(allQuestions[i].answers[j].selected){\n\t\t\t\t\tquestionAnswered = true\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(questionAnswered){\n\t\t\t\tanswered++\n\t\t\t}\n\t\t\telse{ return}\n\t\t}\n\t\tsetTotalCorrect(correctAnswers)\n\t\tsetGameState(\"endGame\")\n\t}\n\n\tfunction handleAnswerClick(event, questionIndex){\n\t\tsetAllQuestions(prevQuestions => prevQuestions.map(question => {\n\t\t\tif (question.id === questionIndex) {\n\t\t\t\tlet updatedAnswers = question.answers.map(answer => (\n\t\t\t\t\tevent.target.id === answer.id ? \n                \t{...answer, selected: !answer.selected} : {...answer, selected: false}\n\t\t\t\t))\n\t\t\t\treturn {...question, answers: updatedAnswers}\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn question\n\t\t\t}\n\t\t}\n\t\t))\n    }\n\n\treturn (\n\t\t<div className=\"main-container\">\n\t\t\t{\n\t\t\tgameState === \"startGame\" && \n\t\t\t<StartScreen \n\t\t\t\tformData={formData}\n\t\t\t\thandleFormChange={handleFormChange}\n\t\t\t\tcategoryOptions={categoryOptions}\n\t\t\t\tstartGame={startGame}\n\t\t\t/>\n\t\t\t}\n\t\t\t{\n\t\t\t(gameState === \"playingGame\" || gameState === \"endGame\")&& \n\t\t\t<PlayScreen \n\t\t\t\tplayingGame={gameState === \"playingGame\" ? true : false}\n\t\t\t\ttoStartScreen={toStartScreen}\n\t\t\t\ttoEndGame={toEndGame}\n\t\t\t\ttotalCorrect={totalCorrect}\n\t\t\t\tgameQuestionsDirty={gameQuestionsDirty}\n\t\t\t/>\n\t\t\t}\n\t\t</div>\n\t)\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}